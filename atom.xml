<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小米 6 首席研究员的研究报告集</title>
  
  <subtitle>Hi there!</subtitle>
  <link href="https://absinthes2049.github.io/atom.xml" rel="self"/>
  
  <link href="https://absinthes2049.github.io/"/>
  <updated>2023-06-23T14:57:28.003Z</updated>
  <id>https://absinthes2049.github.io/</id>
  
  <author>
    <name>Allen Dane</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建 CUDA 环境跑 roop 换脸模型</title>
    <link href="https://absinthes2049.github.io/5484bd8f/"/>
    <id>https://absinthes2049.github.io/5484bd8f/</id>
    <published>2023-06-23T14:02:24.000Z</published>
    <updated>2023-06-23T14:57:28.003Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>发现一个有意思的 CV 项目： <a href="https://github.com/s0md3v/roop" target="_blank" rel="noopener">roop</a> , 号称能实现单图片换脸：</p><blockquote><p>You only need one image of the desired face. No dataset, no training.</p></blockquote><p>虽然可以写脚本部署在 Google Colab 上，不过还是尝试在本地 WSL 子系统部署试试。</p><h2 id="电脑配置-amp-环境"><a href="#电脑配置-amp-环境" class="headerlink" title="电脑配置&amp;环境"></a>电脑配置&amp;环境</h2><ul><li>i7-5500U, 16G, NVIDIA GeForce GTX 950M 2G</li><li>Windows 10 教育版 22H2, WSL Ubuntu 20.04.6 LTS<a id="more"></a><h2 id="安装-CUDA"><a href="#安装-CUDA" class="headerlink" title="安装 CUDA"></a>安装 CUDA</h2></li></ul><p>在 roop 项目的 requirements 里发现了 tensorflow，不过目前好像 pip 安装 tensorflow 并不支持 CUDA 12,(实测确实不支持: (，除非是 docker 部署), 所以 apt 安装 CUDA 时需要指定版本为 CUDA 11</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cuda-11-6</span><br></pre></td></tr></table></figure><p>其余的安装过程是按照 Nvidia 的 <a href="https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#network-repo-installation-for-wsl" target="_blank" rel="noopener">guide</a> 来</p><p>安装完成后检查环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br><span class="line">nvcc -V</span><br></pre></td></tr></table></figure><h2 id="创建-conda-环境"><a href="#创建-conda-环境" class="headerlink" title="创建 conda 环境"></a>创建 conda 环境</h2><p>新建一个 conda 环境，为了稳定使用的 Python 版本为 3.9：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n dl python&#x3D;&#x3D;3.9</span><br></pre></td></tr></table></figure><p>然后按照如下 requirements 安装需要的包：</p><details><summary>requirements</summary><pre><code>absl-py==1.4.0albumentations==1.3.1astunparse==1.6.3beautifulsoup4==4.12.2cachetools==5.3.1certifi==2023.5.7charset-normalizer==3.1.0cmake==3.26.4coloredlogs==15.0.1contourpy==1.1.0customtkinter==5.2.0cycler==0.11.0Cython==0.29.35darkdetect==0.8.0easydict==1.10filelock==3.12.2flatbuffers==23.5.26fonttools==4.40.0gast==0.4.0gdown==4.7.1google-auth==2.20.0google-auth-oauthlib==1.0.0google-pasta==0.2.0grpcio==1.54.2h5py==3.9.0humanfriendly==10.0idna==3.4imageio==2.31.1importlib-metadata==6.7.0importlib-resources==5.12.0insightface==0.7.3jax==0.4.12Jinja2==3.1.2joblib==1.2.0keras==2.13.1rc0keras-nightly==2.14.0kiwisolver==1.4.4lazy_loader==0.2libclang==16.0.0lit==16.0.6Markdown==3.4.3MarkupSafe==2.1.3matplotlib==3.7.1ml-dtypes==0.2.0mpmath==1.3.0networkx==3.1numpy==1.23.5nvidia-cublas-cu11==11.10.3.66nvidia-cublas-cu12==12.1.3.1nvidia-cuda-cupti-cu11==11.7.101nvidia-cuda-nvrtc-cu11==11.7.99nvidia-cuda-runtime-cu11==11.7.99nvidia-cuda-runtime-cu12==12.1.105nvidia-cudnn-cu11==8.5.0.96nvidia-cudnn-cu12==8.9.2.26nvidia-cufft-cu11==10.9.0.58nvidia-curand-cu11==10.2.10.91nvidia-cusolver-cu11==11.4.0.1nvidia-cusparse-cu11==11.7.4.91nvidia-nccl-cu11==2.14.3nvidia-nvtx-cu11==11.7.91nvidia-tensorrt==99.0.0oauthlib==3.2.2onnx==1.14.0onnxruntime-gpu==1.13.1opencv-contrib-python==4.7.0.72opencv-python==4.7.0.72opennsfw2==0.10.2opt-einsum==3.3.0packaging==23.1Pillow==9.5.0prettytable==3.8.0protobuf==4.23.3psutil==5.9.5pyasn1==0.5.0pyasn1-modules==0.3.0pyparsing==3.1.0PySocks==1.7.1python-dateutil==2.8.2PyWavelets==1.4.1PyYAML==6.0qudida==0.0.4requests==2.31.0requests-oauthlib==1.3.1rsa==4.9scikit-image==0.21.0scikit-learn==1.2.2scipy==1.10.1six==1.16.0soupsieve==2.4.1sympy==1.12tb-nightly==2.14.0a20230621tensorboard==2.13.0tensorboard-data-server==0.7.1tensorflow==2.13.0rc1tensorflow-estimator==2.13.0rc0tensorflow-io-gcs-filesystem==0.32.0tensorrt==8.6.1tensorrt-bindings==8.6.1tensorrt-libs==8.6.1termcolor==2.3.0tf-estimator-nightly==2.14.0.dev2023062108tf-nightly==2.14.0.dev20230621threadpoolctl==3.1.0tifffile==2023.4.12torch==2.0.1torchaudio==2.0.2torchvision==0.15.2tqdm==4.65.0triton==2.0.0typing_extensions==4.5.0urllib3==1.26.16wcwidth==0.2.6Werkzeug==2.3.6wrapt==1.14.1zipp==3.15.0</code></pre></details><h2 id="下载模型，运行"><a href="#下载模型，运行" class="headerlink" title="下载模型，运行"></a>下载模型，运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;s0md3v&#x2F;roop.git</span><br></pre></td></tr></table></figure><p>然后再上面创建好的 conda 环境里运行 run.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python run.py --execution-provider cuda -s input_image -t input_video -o onput_video --execution-threads 4</span><br></pre></td></tr></table></figure><p>实测用 4 个线程就能把显卡的 2 个 G 显存吃满，再增加线程数会报错</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;发现一个有意思的 CV 项目： &lt;a href=&quot;https://github.com/s0md3v/roop&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;roop&lt;/a&gt; , 号称能实现单图片换脸：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You only need one image of the desired face. No dataset, no training.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然可以写脚本部署在 Google Colab 上，不过还是尝试在本地 WSL 子系统部署试试。&lt;/p&gt;
&lt;h2 id=&quot;电脑配置-amp-环境&quot;&gt;&lt;a href=&quot;#电脑配置-amp-环境&quot; class=&quot;headerlink&quot; title=&quot;电脑配置&amp;amp;环境&quot;&gt;&lt;/a&gt;电脑配置&amp;amp;环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;i7-5500U, 16G, NVIDIA GeForce GTX 950M 2G&lt;/li&gt;
&lt;li&gt;Windows 10 教育版 22H2, WSL Ubuntu 20.04.6 LTS&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="Little Tips" scheme="https://absinthes2049.github.io/categories/Little-Tips/"/>
    
    
    <category term="Little Tips" scheme="https://absinthes2049.github.io/tags/Little-Tips/"/>
    
  </entry>
  
  <entry>
    <title>PC端Fiddler监听手机流量</title>
    <link href="https://absinthes2049.github.io/3661d922/"/>
    <id>https://absinthes2049.github.io/3661d922/</id>
    <published>2023-06-23T13:38:24.000Z</published>
    <updated>2023-06-23T13:44:23.453Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h2><p>手机和 PC 在同一个网络下。</p><h2 id="PC-端"><a href="#PC-端" class="headerlink" title="PC 端"></a>PC 端</h2><p>设置 - 防火墙和网络保护 - 公用网络 - Microsoft Defender 防火墙 关掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><p>找到当前网络的 IPv4 地址</p><p>打开  Fiddler，Tools - Options - Connections - Allow remote computers to connect ，打√<br>找到 Fiddler 监听端口 Fiddler listens on port, 默认 8888</p><a id="more"></a><h2 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h2><p>当前网络下设置代理，主机名为 PC 的 IPv4 地址，端口为 Fiddler 监听端口</p><p>手机浏览器打开上面的 主机名:端口, 放大拉到最后下载 FiddlerRoot certificate</p><p>安装 FiddlerRoot certificate，MIUI14 是设置 - 安全 - 更多安全设置 - 更多安全设置 - 加密与凭据 - 安装证书 - CA 证书 - 仍然安装 - 选择上面下载的证书</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Prerequisite&quot;&gt;&lt;a href=&quot;#Prerequisite&quot; class=&quot;headerlink&quot; title=&quot;Prerequisite&quot;&gt;&lt;/a&gt;Prerequisite&lt;/h2&gt;&lt;p&gt;手机和 PC 在同一个网络下。&lt;/p&gt;
&lt;h2 id=&quot;PC-端&quot;&gt;&lt;a href=&quot;#PC-端&quot; class=&quot;headerlink&quot; title=&quot;PC 端&quot;&gt;&lt;/a&gt;PC 端&lt;/h2&gt;&lt;p&gt;设置 - 防火墙和网络保护 - 公用网络 - Microsoft Defender 防火墙 关掉&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ipconfig&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;找到当前网络的 IPv4 地址&lt;/p&gt;
&lt;p&gt;打开  Fiddler，Tools - Options - Connections - Allow remote computers to connect ，打√&lt;br&gt;找到 Fiddler 监听端口 Fiddler listens on port, 默认 8888&lt;/p&gt;</summary>
    
    
    
    <category term="Little Tips" scheme="https://absinthes2049.github.io/categories/Little-Tips/"/>
    
    
    <category term="Little Tips" scheme="https://absinthes2049.github.io/tags/Little-Tips/"/>
    
  </entry>
  
  <entry>
    <title>在 WSL2 Ubuntu 20.04 中配置数据库和大数据组件</title>
    <link href="https://absinthes2049.github.io/f6567ea2/"/>
    <id>https://absinthes2049.github.io/f6567ea2/</id>
    <published>2022-04-17T06:37:00.000Z</published>
    <updated>2023-06-23T13:44:29.483Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>WSL2 Ubuntu 20.04 并不是很稳定，又或者由于其它的原因需要重置子系统，已经安装配置好的应用又要重新安装配置，已经踩过的坑又要重新踩一遍。所以有了这篇作为总结和备忘，以后再重新配置直接抄作业就行，不用再重新 debug 已经被 debug 多次的问题。不过新系统每个应用都要重新配置毕竟不是长久之道，早点升级机器配置安装 CDH 之类的集成环境才是正解（现在的机器内存就这么几个 G 你还要装 CDH 它能装吗？ 装不了，没这个能力知道吧 ╮（╯＿╰）╭）。</p><h2 id="WSL2-Ubuntu-重置"><a href="#WSL2-Ubuntu-重置" class="headerlink" title="WSL2 Ubuntu 重置"></a>WSL2 Ubuntu 重置</h2><p>Windows - 设置 - 应用 - 应用和功能 - 应用列表 - Ubuntu on Windows - 高级设置 - 重置</p><a id="more"></a><h2 id="WSL2-Ubuntu-移动到-D-盘"><a href="#WSL2-Ubuntu-移动到-D-盘" class="headerlink" title="WSL2 Ubuntu 移动到 D 盘"></a>WSL2 Ubuntu 移动到 D 盘</h2><p>下载 <a href="https://github.com/DDoSolitary/LxRunOffline" target="_blank" rel="noopener">LxRunOffline</a><br>查看子系统列表 <code>LxRunOffline l</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu</span><br></pre></td></tr></table></figure><p>将 <code>Ubuntu</code> 从默认位置移动到 <code>D:\Virtual Machines\WSL\Ubuntu</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LxRunOffline m -n Ubuntu -d &quot;D:\Virtual Machines\WSL\Ubuntu&quot;</span><br></pre></td></tr></table></figure><p>查看子系统安装位置验证是否迁移成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LxRunOffline di -n Ubuntu</span><br></pre></td></tr></table></figure><h2 id="设置默认-WSL2-子系统发行版"><a href="#设置默认-WSL2-子系统发行版" class="headerlink" title="设置默认 WSL2 子系统发行版"></a>设置默认 WSL2 子系统发行版</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --setdefault Ubuntu</span><br></pre></td></tr></table></figure><h2 id="apt-换源、更新、手动安装-ca-certificates"><a href="#apt-换源、更新、手动安装-ca-certificates" class="headerlink" title="apt 换源、更新、手动安装 ca-certificates"></a>apt 换源、更新、手动安装 ca-certificates</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br><span class="line">cd &#x2F;tmp</span><br><span class="line">wget http:&#x2F;&#x2F;ports.ubuntu.com&#x2F;pool&#x2F;main&#x2F;c&#x2F;ca-certificates&#x2F;ca-certificates_20210119~20.04.2_all.deb</span><br><span class="line">sudo dpkg -i .&#x2F;ca-certificates_20210119~20.04.2_all.deb</span><br></pre></td></tr></table></figure><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure><h3 id="run-nologin-导致的-SSH-启动失败问题"><a href="#run-nologin-导致的-SSH-启动失败问题" class="headerlink" title="/run/nologin 导致的 SSH 启动失败问题"></a>/run/nologin 导致的 SSH 启动失败问题</h3><p><code>sudo vim /etc/pam.d/sshd</code> 注释掉 <code>account    required     pam_nologin.so</code></p><h2 id="配置-systemd"><a href="#配置-systemd" class="headerlink" title="配置 systemd"></a>配置 systemd</h2><p>安装 daemonize : <code>sudo apt install daemonize</code></p><p>安装 systemd：<a href="https://github.com/DamionGans/ubuntu-wsl2-systemd-script" target="_blank" rel="noopener">ubuntu-wsl2-systemd-script</a></p><h3 id="解决-nsenter-cannot-open-proc-10867-ns-time-No-such-file-or-directory-报错"><a href="#解决-nsenter-cannot-open-proc-10867-ns-time-No-such-file-or-directory-报错" class="headerlink" title="解决 nsenter: cannot open /proc/10867/ns/time: No such file or directory 报错"></a>解决 <code>nsenter: cannot open /proc/10867/ns/time: No such file or directory</code> 报错</h3><p><a href="https://github.com/DamionGans/ubuntu-wsl2-systemd-script/issues/36" target="_blank" rel="noopener">nsenter: cannot open /proc/320/ns/time: No such file or directory</a></p><p>测试是否安装成功：<code>systemctl</code></p><h2 id="子系统内屏蔽-Windows-环境变量"><a href="#子系统内屏蔽-Windows-环境变量" class="headerlink" title="子系统内屏蔽 Windows 环境变量"></a>子系统内屏蔽 Windows 环境变量</h2><p>新建 <code>/etc/wsl.conf</code> 文件并添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[interop]</span><br><span class="line">appendWindowsPath &#x3D; false</span><br></pre></td></tr></table></figure><p>上述操作后无法执行 <code>code .</code> 来打开主系统的 VS Code, 所以需要把主系统 VS Code 的安装路径添加到子系统环境变量中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## VS Code</span><br><span class="line">PATH&#x3D;$PATH:&#39;&#x2F;mnt&#x2F;c&#x2F;Program Files&#x2F;Microsoft VS Code&#x2F;bin&#39;</span><br></pre></td></tr></table></figure><p>重启子系统</p><h2 id="Python-软连接、PIP-安装、pip-换源"><a href="#Python-软连接、PIP-安装、pip-换源" class="headerlink" title="Python 软连接、PIP 安装、pip 换源"></a>Python 软连接、PIP 安装、pip 换源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s &#x2F;usr&#x2F;bin&#x2F;python3.8 &#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line">sudo apt install python3-pip -y</span><br><span class="line">pip config set global.index-url https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure><h2 id="Conda-环境"><a href="#Conda-环境" class="headerlink" title="Conda 环境"></a>Conda 环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;repo.anaconda.com&#x2F;miniconda&#x2F;Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line">bash Miniconda3-latest-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><h2 id="Jupyter-环境"><a href="#Jupyter-环境" class="headerlink" title="Jupyter 环境"></a>Jupyter 环境</h2><p>PIP 安装 Jupyter：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyterlab jupyterlab-language-pack-zh-CN jupyterlab-execute-time</span><br></pre></td></tr></table></figure><p>Jupyter 环境变量：<code>export PATH=$PATH:~/.local/bin</code><br>Jupyter 笔记本设置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"codeCellConfig"</span>:</span><br><span class="line">    &#123;<span class="attr">"autoClosingBrackets"</span>: <span class="literal">false</span>,&#125;,</span><br><span class="line">    <span class="attr">"recordTiming"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-环境"><a href="#Java-环境" class="headerlink" title="Java 环境"></a>Java 环境</h2><p>安装 Java 8 ：<code>sudo apt-get install openjdk-8-jdk</code><br>Java 环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## JAVA</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-8-openjdk-amd64</span><br><span class="line">export JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre</span><br><span class="line">export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;lib</span><br><span class="line">export PATH&#x3D;$&#123;JAVA_HOME&#125;&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><a href="/21f81262/" title="在 WSL2 Ubuntu 20.04 上安装 MySQL 并配置账户">在 WSL2 Ubuntu 20.04 上安装 MySQL 并配置账户</a><h2 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h2><p>在 Windows 中配置端口 1433 入站规则：<a href="https://docs.microsoft.com/zh-cn/sql/database-engine/configure-windows/configure-a-windows-firewall-for-database-engine-access?view=sql-server-ver15#to-open-a-port-in-the-windows-firewall-for-tcp-access" target="_blank" rel="noopener">打开 Windows 防火墙的端口以进行 TCP 访问</a></p><a href="/f02a8e7e/" title="在 WSL2 Ubuntu 20.04 上安装 SQL Server 并用 Sqoop 将数据导入 HDFS">在 WSL2 Ubuntu 20.04 上安装 SQL Server 并用 Sqoop 将数据导入 HDFS</a><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><a href="/b2d32093/" title="在 WSL2 Ubuntu 20.04 上安装 Hadoop 并写一个 WordCount">在 WSL2 Ubuntu 20.04 上安装 Hadoop 并写一个 WordCount</a><h2 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h2><p><a href="https://www.tutorialspoint.com/apache_spark/apache_spark_installation.htm" target="_blank" rel="noopener">Apache Spark - Installation</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## SPARK</span><br><span class="line">export SPARK_HOME&#x3D;&#x2F;home&#x2F;herman&#x2F;apps&#x2F;spark-3.2.1</span><br><span class="line">export PATH&#x3D;$PATH:$SPARK_HOME&#x2F;bin</span><br><span class="line">export PYSPARK_DRIVER_PYTHON&#x3D;jupyter</span><br><span class="line">export PYSPARK_PYTHON&#x3D;python</span><br><span class="line">export PYSPARK_DRIVER_PYTHON_OPTS&#x3D;&#39;lab --no-browser&#39;</span><br></pre></td></tr></table></figure><h2 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h2><a href="/21fed225/" title="在 WSL2 Ubuntu 20.04 上安装 Hive">在 WSL2 Ubuntu 20.04 上安装 Hive</a><h2 id="Presto"><a href="#Presto" class="headerlink" title="Presto"></a>Presto</h2><a href="/f51b91f3/" title="在 WSL2 Ubuntu 20.04 上安装 Presto">在 WSL2 Ubuntu 20.04 上安装 Presto</a>]]></content>
    
    
    <summary type="html">&lt;p&gt;WSL2 Ubuntu 20.04 并不是很稳定，又或者由于其它的原因需要重置子系统，已经安装配置好的应用又要重新安装配置，已经踩过的坑又要重新踩一遍。所以有了这篇作为总结和备忘，以后再重新配置直接抄作业就行，不用再重新 debug 已经被 debug 多次的问题。不过新系统每个应用都要重新配置毕竟不是长久之道，早点升级机器配置安装 CDH 之类的集成环境才是正解（现在的机器内存就这么几个 G 你还要装 CDH 它能装吗？ 装不了，没这个能力知道吧 ╮（╯＿╰）╭）。&lt;/p&gt;
&lt;h2 id=&quot;WSL2-Ubuntu-重置&quot;&gt;&lt;a href=&quot;#WSL2-Ubuntu-重置&quot; class=&quot;headerlink&quot; title=&quot;WSL2 Ubuntu 重置&quot;&gt;&lt;/a&gt;WSL2 Ubuntu 重置&lt;/h2&gt;&lt;p&gt;Windows - 设置 - 应用 - 应用和功能 - 应用列表 - Ubuntu on Windows - 高级设置 - 重置&lt;/p&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://absinthes2049.github.io/categories/Big-Data/"/>
    
    
    <category term="Big Data" scheme="https://absinthes2049.github.io/tags/Big-Data/"/>
    
  </entry>
  
  <entry>
    <title>在 WSL2 Ubuntu 20.04 上安装 Presto</title>
    <link href="https://absinthes2049.github.io/f51b91f3/"/>
    <id>https://absinthes2049.github.io/f51b91f3/</id>
    <published>2022-04-16T17:26:01.000Z</published>
    <updated>2022-05-02T05:19:58.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载 <a href="https://repo1.maven.org/maven2/com/facebook/presto/presto-server/0.272/presto-server-0.272.tar.gz" target="_blank" rel="noopener">presto-server-0.272.tar.gz</a> 到本地并解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf presto-server-0.272.tar.gz -C ~</span><br></pre></td></tr></table></figure><p>在 ./bashrc 里添加 <code>Presto</code> 环境变量 <code>vim ~/.bashrc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## Presto env</span><br><span class="line">export PRESTO_HOME&#x3D;~&#x2F;apps&#x2F;presto-server-0.272</span><br><span class="line">export PATH&#x3D;$PATH:$PRESTO_HOME&#x2F;bin</span><br></pre></td></tr></table></figure><a id="more"></a><p>下载 <a href="https://repo1.maven.org/maven2/com/facebook/presto/presto-cli/0.272/presto-cli-0.272-executable.jar" target="_blank" rel="noopener">presto-cli-0.272-executable.jar</a> 到 <code>$PRESTO_HOME/bin</code> 并改名为 ‘presto’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp presto-cli-0.272-executable.jar presto</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>基本按照<a href="https://prestodb.io/docs/current/installation/deployment.html#configuring-presto" target="_blank" rel="noopener">官方文档</a>.</p><p>创建 <code>$PRESTO_HOME/etc</code> 文件夹并在下面新建 <code>node.properties</code> 内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node.environment&#x3D;production</span><br><span class="line">node.id&#x3D;ffffffff-ffff-ffff-ffff-ffffffffffff</span><br><span class="line">node.data-dir&#x3D;&#x2F;var&#x2F;presto&#x2F;data</span><br></pre></td></tr></table></figure><p>新建 <code>jvm.config</code> 内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-server</span><br><span class="line">-Xmx16G</span><br><span class="line">-XX:+UseG1GC</span><br><span class="line">-XX:G1HeapRegionSize&#x3D;32M</span><br><span class="line">-XX:+UseGCOverheadLimit</span><br><span class="line">-XX:+ExplicitGCInvokesConcurrent</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:+ExitOnOutOfMemoryError</span><br></pre></td></tr></table></figure><p>新建 <code>config.properties</code> 内容为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">coordinator&#x3D;true</span><br><span class="line">node-scheduler.include-coordinator&#x3D;true</span><br><span class="line">http-server.http.port&#x3D;8082</span><br><span class="line">query.max-memory&#x3D;5GB</span><br><span class="line">query.max-memory-per-node&#x3D;1GB</span><br><span class="line">query.max-total-memory-per-node&#x3D;2GB</span><br><span class="line">discovery-server.enabled&#x3D;true</span><br><span class="line">discovery.uri&#x3D;http:&#x2F;&#x2F;localhost:8082</span><br></pre></td></tr></table></figure><p>新建 <code>log.properties</code> 内容为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.facebook.presto&#x3D;INFO</span><br></pre></td></tr></table></figure><p>新建 <code>$PRESTO_HOME/etc/catalog</code> 文件夹并在下面新建 <code>jmx.properties</code> 内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connector.name&#x3D;jmx</span><br></pre></td></tr></table></figure><p>新建 <code>hive.properties</code> 内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connector.name&#x3D;hive-hadoop2</span><br><span class="line">hive.metastore.uri&#x3D;thrift:&#x2F;&#x2F;localhost:9083</span><br></pre></td></tr></table></figure><h2 id="启动-Presto-Server"><a href="#启动-Presto-Server" class="headerlink" title="启动 Presto Server"></a>启动 Presto Server</h2><p>后台启动：<code>launcher start</code></p><p>前台启动: <code>launcher run --verbose</code></p><p>查看状态：<code>launcher status</code></p><p>停止：<code>launcher stop</code></p><h2 id="启动-Presto-CLI"><a href="#启动-Presto-CLI" class="headerlink" title="启动 Presto CLI"></a>启动 Presto CLI</h2><p>先启动 Hive Metastore 服务，然后启动 Presto CLI :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">presto --server localhost:8082 --catalog hive --schema default</span><br><span class="line">presto:default&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;下载 &lt;a href=&quot;https://repo1.maven.org/maven2/com/facebook/presto/presto-server/0.272/presto-server-0.272.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;presto-server-0.272.tar.gz&lt;/a&gt; 到本地并解压&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tar -zxvf presto-server-0.272.tar.gz -C ~&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 ./bashrc 里添加 &lt;code&gt;Presto&lt;/code&gt; 环境变量 &lt;code&gt;vim ~/.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;## Presto env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PRESTO_HOME&amp;#x3D;~&amp;#x2F;apps&amp;#x2F;presto-server-0.272&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PATH&amp;#x3D;$PATH:$PRESTO_HOME&amp;#x2F;bin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://absinthes2049.github.io/categories/Big-Data/"/>
    
    <category term="Presto" scheme="https://absinthes2049.github.io/categories/Presto/"/>
    
    
    <category term="Big Data" scheme="https://absinthes2049.github.io/tags/Big-Data/"/>
    
    <category term="Presto" scheme="https://absinthes2049.github.io/tags/Presto/"/>
    
  </entry>
  
  <entry>
    <title>在 WSL2 Ubuntu 20.04 上安装 Hive</title>
    <link href="https://absinthes2049.github.io/21fed225/"/>
    <id>https://absinthes2049.github.io/21fed225/</id>
    <published>2022-04-16T17:26:00.000Z</published>
    <updated>2022-05-09T07:23:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://dlcdn.apache.org/hive/hive-3.1.3/apache-hive-3.1.3-bin.tar.gz" target="_blank" rel="noopener">HIVE 3.1.3</a>  下载下来解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf apache-hive-3.1.3-bin.tar.gz -C ~</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在 ./bashrc 里添加 Hive 环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## Hive env</span><br><span class="line">export HIVE_HOME&#x3D;~&#x2F;apps&#x2F;hive-3.1.3</span><br><span class="line">export PATH&#x3D;$PATH:$HIVE_HOME&#x2F;bin</span><br></pre></td></tr></table></figure><a id="more"></a><p>将 <a href="https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.28/mysql-connector-java-8.0.28.jar" target="_blank" rel="noopener">mysql-connector-java-8.0.28.jar</a> 放在 <code>$HIVE_HOME/lib</code> 下, </p><p>在 MySQL 中配置 Hive 元数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">mysql&gt; create database hive;</span><br><span class="line">mysql&gt; CREATE USER hive@localhost IDENTIFIED BY &#39;hive&#39;;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO hive@localhost WITH GRANT OPTION;</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>在 <code>$HIVE_HOME/conf</code> 下新建 <code>hive-default.xml</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp hive-default.xml.template hive-default.xml</span><br></pre></td></tr></table></figure><p>新建 <code>hive-site.xml</code>, 并添加以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/hive?createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.thrift.client.user<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>herman<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Username to use against thrift client<span class="tag">&lt;/<span class="name">description</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.thrift.client.password<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>[password]<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Password to use against thrift client<span class="tag">&lt;/<span class="name">description</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.enable.doAs<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Setting this property to true will have HiveServer2 execute Hive operations as the user making the calls to it.<span class="tag">&lt;/<span class="name">description</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.uris<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>thrift://localhost:9083<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.event.db.notification.api.auth<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>$HADOOP_HOME/etc/hadoop/core-site.xml</code> 中添加下面内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hadoop.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hadoop.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="启动-Hive-CLI"><a href="#启动-Hive-CLI" class="headerlink" title="启动 Hive CLI"></a>启动 Hive CLI</h2><p>启动 HADOOP 集群 <code>start-dfs.sh</code>, Hive 第一次启动要格式化 Hive Shema:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$HIVE_HOME&#x2F;bin&#x2F;schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure><p>启动 <code>hive</code> 验证是否安装成功:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt;</span><br><span class="line">hive&gt;exit;</span><br></pre></td></tr></table></figure><h2 id="启动-Beeline"><a href="#启动-Beeline" class="headerlink" title="启动 Beeline"></a>启动 Beeline</h2><p>先启动 <code>metastore</code> 和 <code>hiveserver2</code> 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup hive --service metastore 1&gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">nohup hive --service hiveserver2 1&gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>启动 Beeline 并连接 Hive:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beeline</span><br><span class="line">beeline&gt; !connect jdbc:hive2:&#x2F;&#x2F;localhost:10000</span><br><span class="line">Connected to: Apache Hive (version 3.1.3)</span><br><span class="line">Driver: Hive JDBC (version 2.3.9)</span><br><span class="line">Transaction isolation: TRANSACTION_REPEATABLE_READ</span><br><span class="line">0: jdbc:hive2:&#x2F;&#x2F;localhost:10000&gt;</span><br></pre></td></tr></table></figure><h2 id="Hive-启动脚本"><a href="#Hive-启动脚本" class="headerlink" title="Hive 启动脚本"></a>Hive 启动脚本</h2><p><code>sudo vim $HIVE_HOME/bin/hive.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">mkdir -p $HIVE_HOME&#x2F;log</span><br><span class="line"></span><br><span class="line">status()&#123;</span><br><span class="line">    ps -ef | grep -v grep | grep -E &#39;HiveMetaStore|HiveServer2&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start()&#123;</span><br><span class="line">    status &amp;&gt;&#x2F;dev&#x2F;null &amp;&amp; &#123; echo &quot;Stop HiveMetaStore or HiveServer2 first!&quot;;exit 1; &#125;</span><br><span class="line">    nohup $HIVE_HOME&#x2F;bin&#x2F;hive --service metastore &amp;&gt; $HIVE_HOME&#x2F;log&#x2F;metastore.log &amp;</span><br><span class="line">    nohup $HIVE_HOME&#x2F;bin&#x2F;hive --service hiveserver2 &amp;&gt; $HIVE_HOME&#x2F;log&#x2F;metastore.log &amp;</span><br><span class="line">    sleep 1 &amp;&amp; echo &quot;HiveMetaStore &amp; HiveServer2 started!&quot;</span><br><span class="line"></span><br><span class="line">    ip addr | grep &quot;eth0&quot; | grep &quot;inet&quot; | cut -d &quot; &quot; -f 6 | cut -d &#x2F; -f 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop()&#123;</span><br><span class="line">    if status &amp;&gt;&#x2F;dev&#x2F;null</span><br><span class="line">    then</span><br><span class="line">        status | awk &#39;&#123;print $2&#125;&#39; | xargs kill -9</span><br><span class="line">        echo &quot;HiveMetaStore &amp; HiveServer2 stopped!&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;HiveMetaStore &amp; HiveServer2 not found!&quot;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">restart()&#123;</span><br><span class="line">    stop &amp;&amp; start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">    status) status ;;</span><br><span class="line">    start) start;;</span><br><span class="line">    stop) stop;;</span><br><span class="line">    restart) restart;;</span><br><span class="line">    *) echo &quot;Usage: $0 &lt;start|stop|status|restart&gt;&quot;;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p><code>sudo vim $HIVE_HOME/bin/hive.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">ssh_flag&#x3D;$(echo 1 | sudo -S service ssh status | grep &quot;Active&quot; | awk &#39;&#123;print $2&#125;&#39;)</span><br><span class="line">mysql_flag&#x3D;$(echo 1 | sudo -S service mysql status | grep &quot;Active&quot; | awk &#39;&#123;print $2&#125;&#39;)</span><br><span class="line">dfs_flag&#x3D;$(jps | grep -v grep | awk &#39;&#123;print $2&#125;&#39; | grep -E &#39;DataNode|NameNode|SecondaryNameNode&#39; | sort | xargs)</span><br><span class="line">yarn_flag&#x3D;$(jps | grep -v grep | awk &#39;&#123;print $2&#125;&#39; | grep -E &#39;ResourceManager|NodeManager&#39; | sort | xargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ $ssh_flag &#x3D;&#x3D; &quot;inactive&quot; ]; then</span><br><span class="line">        echo 1 | sudo -S service ssh start</span><br><span class="line">        echo &quot;ssh service start successfully&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $mysql_flag &#x3D;&#x3D; &#39;inactive&#39; ]; then</span><br><span class="line">        echo 1 | sudo -S service mysql start</span><br><span class="line">        echo &quot;mysql service start successfully&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$dfs_flag&quot; !&#x3D; &quot;DataNode NameNode SecondaryNameNode&quot; ]; then</span><br><span class="line">        start-dfs.sh</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$yarn_flag&quot; !&#x3D; &quot;NodeManager ResourceManager&quot; ]; then</span><br><span class="line">        start-yarn.sh</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">hive.sh start</span><br></pre></td></tr></table></figure><h2 id="故障排错"><a href="#故障排错" class="headerlink" title="故障排错"></a>故障排错</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat $HIVE_HOME&#x2F;log</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://dlcdn.apache.org/hive/hive-3.1.3/apache-hive-3.1.3-bin.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HIVE 3.1.3&lt;/a&gt;  下载下来解压&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo tar -zxvf apache-hive-3.1.3-bin.tar.gz -C ~&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;p&gt;在 ./bashrc 里添加 Hive 环境：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;## Hive env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export HIVE_HOME&amp;#x3D;~&amp;#x2F;apps&amp;#x2F;hive-3.1.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PATH&amp;#x3D;$PATH:$HIVE_HOME&amp;#x2F;bin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://absinthes2049.github.io/categories/Big-Data/"/>
    
    <category term="Hive" scheme="https://absinthes2049.github.io/categories/Hive/"/>
    
    
    <category term="Big Data" scheme="https://absinthes2049.github.io/tags/Big-Data/"/>
    
    <category term="Hive" scheme="https://absinthes2049.github.io/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>在 WSL2 Ubuntu 20.04 上安装 MySQL 并配置账户</title>
    <link href="https://absinthes2049.github.io/21f81262/"/>
    <id>https://absinthes2049.github.io/21f81262/</id>
    <published>2022-03-19T08:16:00.000Z</published>
    <updated>2022-05-02T05:20:36.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>没想到在子系统上装 MySQL 还要专门记录一下，微软的<a href="https://docs.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-database#install-mysql" target="_blank" rel="noopener">官方文档</a>实在是一言难尽……</p><p>需要注意的是不要同时在 Windows 和子系统上安装 MySQL， 两者会有冲突。在子系统上安装时需要先卸载 Windows 上的 MySQL 。</p><a id="more"></a><p>首先安装 MySQL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mysql-server mysql-client</span><br></pre></td></tr></table></figure><p>完成后查一下 MySQL 版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql  Ver 8.0.28-0ubuntu0.20.04.3 for Linux on x86_64 ((Ubuntu))</span><br></pre></td></tr></table></figure><p>接下来进入 MySQL, 这时有两种方法进入 MySQL, 直接用 <code>sudo mysql</code> 或者查看 MySQL 的配置文件 <code>sudo cat /etc/mysql/debian.cnf</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Automatically generated for Debian scripts. DO NOT TOUCH!</span><br><span class="line">[client]</span><br><span class="line">host     &#x3D; localhost</span><br><span class="line">user     &#x3D; debian-sys-maint</span><br><span class="line">password &#x3D; dPuEW5dxRf3kYIWo</span><br><span class="line">socket   &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock</span><br><span class="line">[mysql_upgrade]</span><br><span class="line">host     &#x3D; localhost</span><br><span class="line">user     &#x3D; debian-sys-maint</span><br><span class="line">password &#x3D; &lt;password&gt;</span><br><span class="line">socket   &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock</span><br></pre></td></tr></table></figure><p>用里面的 <code>debian-sys-maint</code> 账户： <code>mysql -uroot -p</code> 然后输入倒数第二行的密码就可以进了。</p><p>进入到 MySQL 环境后首先给 <code>root</code> 用户改密码:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">'1234'</span>;</span><br></pre></td></tr></table></figure><p>要注意 MySQL 版本不同改密码的命令也不一样，上面的语句对 MySQL 8 或以上的有效。</p><p>也可以给当前子系统的账户创建一个账户:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'&#123;YOURNAME]'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'1234'</span>;</span><br></pre></td></tr></table></figure><p>查看默认端口号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#39;port&#39;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;没想到在子系统上装 MySQL 还要专门记录一下，微软的&lt;a href=&quot;https://docs.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-database#install-mysql&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;实在是一言难尽……&lt;/p&gt;
&lt;p&gt;需要注意的是不要同时在 Windows 和子系统上安装 MySQL， 两者会有冲突。在子系统上安装时需要先卸载 Windows 上的 MySQL 。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://absinthes2049.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>在 WSL2 Ubuntu 20.04 上安装 SQL Server 并用 Sqoop 将数据导入 HDFS</title>
    <link href="https://absinthes2049.github.io/f02a8e7e/"/>
    <id>https://absinthes2049.github.io/f02a8e7e/</id>
    <published>2022-03-16T13:56:00.000Z</published>
    <updated>2022-05-02T05:20:52.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在子系统上安装 SQL Server 上基本按照微软官方的 <a href="https://docs.microsoft.com/zh-cn/sql/linux/quickstart-install-connect-ubuntu?view=sql-server-ver15" target="_blank" rel="noopener">Tutorial</a>, 原来想着照着上面的命令敲一遍完事大吉, 结果敲完最后一个命令<code>sudo /opt/mssql/bin/mssql-conf setup</code> 报错了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System has not been booted with systemd as init system (PID 1). Can&#39;t operate.</span><br><span class="line">Attempting to start the Microsoft SQL Server service failed.</span><br></pre></td></tr></table></figure><a id="more"></a><p>启动 SQL Server 失败。在这里折腾了很久，尝试了各种姿势，后来发现需要在子系统上正常执行 <code>systemctl</code> 才可以，参考<a href="https://forum.snapcraft.io/t/running-snaps-on-wsl2-insiders-only-for-now/13033" target="_blank" rel="noopener">这篇</a>做了一些设置：<br>首先安装 <code>daemonize</code> 和 <code>fontconfig</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y fontconfig daemonize</span><br></pre></td></tr></table></figure><p>编辑<code>/etc/profile</code> 并加入下面的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SYSTEMD_PID&#x3D;$(ps -ef | grep &#39;&#x2F;lib&#x2F;systemd&#x2F;systemd --system-unit&#x3D;basic.target$&#39; | grep -v unshare | awk &#39;&#123;print $2&#125;&#39;)</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$SYSTEMD_PID&quot; ]; then</span><br><span class="line">  sudo &#x2F;usr&#x2F;bin&#x2F;daemonize &#x2F;usr&#x2F;bin&#x2F;unshare --fork --pid --mount-proc &#x2F;lib&#x2F;systemd&#x2F;systemd --system-unit&#x3D;basic.target</span><br><span class="line">  SYSTEMD_PID&#x3D;$(ps -ef | grep &#39;&#x2F;lib&#x2F;systemd&#x2F;systemd --system-unit&#x3D;basic.target$&#39; | grep -v unshare | awk &#39;&#123;print $2&#125;&#39;)</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$SYSTEMD_PID&quot; ] &amp;&amp; [ &quot;$SYSTEMD_PID&quot; !&#x3D; &quot;1&quot; ]; then</span><br><span class="line">    exec sudo &#x2F;usr&#x2F;bin&#x2F;nsenter -t $SYSTEMD_PID -a su - $LOGNAME</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>修改<code>/etc/sudoers</code>并加入下面的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%sudo ALL&#x3D;(ALL) NOPASSWD: &#x2F;usr&#x2F;sbin&#x2F;daemonize &#x2F;usr&#x2F;bin&#x2F;unshare --fork --pid --mount-proc &#x2F;lib&#x2F;systemd&#x2F;systemd --system-unit&#x3D;basic.target</span><br><span class="line">%sudo ALL&#x3D;(ALL) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;nsenter -t [0-9]* -a su - [a-zA-Z0-9]*</span><br></pre></td></tr></table></figure><p>最后执行下<code>source /etc/profile</code>确认设置成功</p><p>设置成功后参考微软的<a href="https://docs.microsoft.com/zh-cn/sql/linux/sql-server-linux-troubleshooting-guide?view=sql-server-ver15#rebuild-system-databases" target="_blank" rel="noopener">文档</a>重新生成下数据库, 按照操作设置完密码重新启动 SQL Server 服务后登录 SQL Server:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlcmd -S localhost -U SA -P</span><br></pre></td></tr></table></figure><p>现在其实可以在主机用 SSMS 登录子系统的 SQL Server 了，首先看下子系统的 IP 地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><p>得到的 IP 地址作为服务器名称填上去，再选 SQL Server 身份验证填上用户名密码就可以登录了。</p><p>在 <code>tempdb</code> 数据库建一个数据表并插入两条记录来测试 Sqoop：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE tempdb;</span><br><span class="line">GO;</span><br><span class="line">CREATE TABLE Inventory (id INT, name NVARCHAR(50), quantity INT);</span><br><span class="line">INSERT INTO Inventory VALUES (1, &#39;banana&#39;, 150); INSERT INTO Inventory VALUES (2, &#39;orange&#39;, 154);</span><br><span class="line">GO;</span><br><span class="line">SELECT * FROM Inventory;</span><br><span class="line">GO;</span><br></pre></td></tr></table></figure><p>设置好 Sqoop 和 Hadoop 后用下面的命令来讲数据库 <code>tempdb</code> 里的 <code>Inventory</code> 表导入到 HDFS:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sqoop import \</span><br><span class="line">--connect &#39;jdbc:sqlserver:&#x2F;&#x2F;;serverName&#x3D;127.0.0.1;port&#x3D;1433;databaseName&#x3D;tempdb&#39; \</span><br><span class="line">--username sa \</span><br><span class="line">--password &lt;password&gt; \</span><br><span class="line">--table Inventory \</span><br><span class="line">--target-dir &#x2F;mssql \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--fields-terminated-by &quot;\t&quot;</span><br></pre></td></tr></table></figure><p>上面的命令会把数据导入到 <code>/mssql</code> 这个路径下面。 </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在子系统上安装 SQL Server 上基本按照微软官方的 &lt;a href=&quot;https://docs.microsoft.com/zh-cn/sql/linux/quickstart-install-connect-ubuntu?view=sql-server-ver15&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tutorial&lt;/a&gt;, 原来想着照着上面的命令敲一遍完事大吉, 结果敲完最后一个命令&lt;code&gt;sudo /opt/mssql/bin/mssql-conf setup&lt;/code&gt; 报错了:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;System has not been booted with systemd as init system (PID 1). Can&amp;#39;t operate.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Attempting to start the Microsoft SQL Server service failed.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="SQL Server" scheme="https://absinthes2049.github.io/categories/SQL-Server/"/>
    
    <category term="Big Data" scheme="https://absinthes2049.github.io/categories/Big-Data/"/>
    
    <category term="Sqoop" scheme="https://absinthes2049.github.io/categories/Sqoop/"/>
    
    
    <category term="SQL Server" scheme="https://absinthes2049.github.io/tags/SQL-Server/"/>
    
    <category term="Sqoop" scheme="https://absinthes2049.github.io/tags/Sqoop/"/>
    
    <category term="Big Data" scheme="https://absinthes2049.github.io/tags/Big-Data/"/>
    
  </entry>
  
  <entry>
    <title>将 mdf 文件导入 SQL Server 失败提示拒绝访问的错误处理</title>
    <link href="https://absinthes2049.github.io/df5d379e/"/>
    <id>https://absinthes2049.github.io/df5d379e/</id>
    <published>2022-03-12T12:36:00.000Z</published>
    <updated>2022-03-12T12:53:20.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>将备份在移动硬盘的 mdf 数据库文件导入到 SQL Server 时失败并提示拒绝访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">消息 5120，级别 16，状态 101，第 1 行</span><br><span class="line">无法打开物理文件“D:\test.mdf”。操作系统错误 5:“5(拒绝访问。)”。</span><br><span class="line">消息 1802，级别 16，状态 7，第 1 行</span><br><span class="line">CREATE DATABASE 失败。无法创建列出的某些文件名。请查看相关错误。</span><br></pre></td></tr></table></figure><p>感觉是文件权限的问题。用 <code>Get-Acl</code> 看一下权限信息</p><a id="more"></a><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get-acl</span> D:\test.mdf | <span class="built_in">format-list</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Path   : Microsoft.PowerShell.Core\FileSystem::D:\test.mdf</span><br><span class="line">Owner  : MYMACHINE\MYUSERNAME</span><br><span class="line">Group  : MYMACHINE\MYUSERNAME</span><br><span class="line">Access : BUILTIN\Administrators Allow  FullControl</span><br><span class="line">         NT AUTHORITY\SYSTEM Allow  FullControl</span><br><span class="line">         NT AUTHORITY\Authenticated Users Allow  Modify, Synchronize</span><br><span class="line">         BUILTIN\Users Allow  ReadAndExecute, Synchronize</span><br><span class="line">Audit  :</span><br><span class="line">Sddl   :</span><br></pre></td></tr></table></figure><p>应该是没有对这个文件赋权导致的。可以先手动对一个 mdf 文件添加当前用户的权限，</p><img src="/df5d379e/add_user.png" class title="figure_1"><p>然后用 <code>Set-Acl</code> 将这个文件的权限应用到所有待赋权的文件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ownerACL</span> = <span class="built_in">Get-Acl</span> <span class="literal">-Path</span> <span class="string">"D:\test.mdf"</span></span><br><span class="line"><span class="built_in">Get-ChildItem</span> <span class="literal">-Path</span> D:\ <span class="literal">-Recurse</span> <span class="literal">-Include</span> <span class="string">"*.?df"</span> | <span class="built_in">Set-Acl</span> <span class="literal">-AclObject</span> <span class="variable">$ownerACL</span></span><br></pre></td></tr></table></figure><p>再次导入数据库导入成功。问题解决。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;将备份在移动硬盘的 mdf 数据库文件导入到 SQL Server 时失败并提示拒绝访问：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;消息 5120，级别 16，状态 101，第 1 行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;无法打开物理文件“D:&#92;test.mdf”。操作系统错误 5:“5(拒绝访问。)”。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;消息 1802，级别 16，状态 7，第 1 行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CREATE DATABASE 失败。无法创建列出的某些文件名。请查看相关错误。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;感觉是文件权限的问题。用 &lt;code&gt;Get-Acl&lt;/code&gt; 看一下权限信息&lt;/p&gt;</summary>
    
    
    
    <category term="SQL Server" scheme="https://absinthes2049.github.io/categories/SQL-Server/"/>
    
    <category term="Poweshell" scheme="https://absinthes2049.github.io/categories/Poweshell/"/>
    
    
    <category term="SQL Server" scheme="https://absinthes2049.github.io/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>一次纠结的小米 3 TD 内核编译经历</title>
    <link href="https://absinthes2049.github.io/37cb43d0/"/>
    <id>https://absinthes2049.github.io/37cb43d0/</id>
    <published>2022-02-27T10:15:00.000Z</published>
    <updated>2022-04-17T06:47:18.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>10 年前的电脑可以装最新的 Windows 11，10 年前的安卓机却装不聊最新的 Android 发行版。虽然安卓开放，但上游硬件厂商提供的驱动和文档确大都闭源甚至收费的。再加上对各种商业因素的考量，一款安卓手机发布 2 到 3 年后，厂商就愉快地结束升级支持并转身投入到新机器的系统适配和维护中去了。这台用着英伟达 SoC 的手机在服务周期内虽然从 MIUI5 升级到 MIUI9 ，但 Android 版本一直停留在 4.4.4，升级内容基本是换皮。被英伟达坑了的小米坑了一众相信 MIUI 的米粉。</p><a id="more"></a><p>这个机器的内核开源了后，民间的第三方 ROM 才有活跃了起来。这次试下用源码编译内核并且刷进机器上。<a href="https://github.com/MiCode/Xiaomi_Kernel_OpenSource/tree/pisces-kk-oss" target="_blank" rel="noopener">源码</a>全部 clone 下来有 n 个多 G，Github 下载速度很慢，所有在 Gitee 上找了一个备份的<a href="https://gitee.com/Dksslq/Xiaomi_Kernel_OpenSource/tree/pisces-kk-oss/" target="_blank" rel="noopener">仓库</a>。按照<a href="https://github.com/MiCode/Xiaomi_Kernel_OpenSource/wiki/How-to-compile-kernel-standalone" target="_blank" rel="noopener">小米官方内核编译WIKI</a>下载下来还要安装一大堆开发环境包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-gtk3-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev unzip openjdk-8-jdk language-pack-zh-hans abootimg</span><br></pre></td></tr></table></figure><p>在源码的<a href="https://github.com/MiCode/Xiaomi_Kernel_OpenSource/tree/pisces-kk-oss/include/linux" target="_blank" rel="noopener">这个位置</a> 搜 gcc 发现返回这三个结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compiler-gcc.h</span><br><span class="line">compiler-gcc3.h</span><br><span class="line">compiler-gcc4.h</span><br></pre></td></tr></table></figure><p>所以要找的跨平台编译链工具的版本号大概是 4 左右。在 GNU Arm Embedded Toolchain 的<a href="https://launchpad.net/gcc-arm-embedded/+series" target="_blank" rel="noopener">官网</a>可以查到最后一个 4.9 的版本是 <a href="https://launchpad.net/gcc-arm-embedded/4.9/4.9-2015-q3-update" target="_blank" rel="noopener">4.9-2015-q3-update</a>。下载下来解压并配置好环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export ARCH&#x3D;arm</span><br><span class="line">export SUBARCH&#x3D;arm</span><br><span class="line">export CROSS_COMPILE&#x3D;&#x2F;home&#x2F;user&#x2F;gcc-arm-none-eabi-4_9-2015q3&#x2F;bin&#x2F;arm-none-eabi-</span><br></pre></td></tr></table></figure><p>在这个仓库里用 git log 可以看到：</p><blockquote><p>The Patch based on NVIDIA release TAG tegra-17r18-android-4.2</p><p>The kernel config file used is tegra11_pisces_user_defconfig</p><p></p></blockquote><p>接下来先建一个输出文件夹，然后开始编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir out</span><br><span class="line">make O=out tegra11_pisces_user_defconfig</span><br><span class="line">make -j32 O=out</span><br></pre></td></tr></table></figure><p>中间遇到错误停下来编译终止，查看报错的是 <code>/drivers/media/video/tegra/ad5823.c</code> 这里出现 <code>error: iteration 6u invokes undefined behavio</code>, 按照搜到的方法在下面的代码中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for (i &#x3D; 0; i &lt;&#x3D; ARRAY_SIZE(ad5823_gpios); i++) &#123;</span><br><span class="line">    if (info-&gt;gpio[i].flag &amp;&amp; info-&gt;gpio[i].own) &#123;</span><br><span class="line">        gpio_free(info-&gt;gpio[i].gpio);</span><br><span class="line">        info-&gt;gpio[i].own &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把 &lt;= 改成&lt; 后就好了。改完后重新开始编译，若编译成功最后的 log 里会出现 <code>zImage is ready</code> 的字样。在 <code>./out/arch/arm/boot</code> 下面的 zImage 文件就是编译好的内核文件。</p><p>现在要把 zImage 打包成 img 文件刷进手机。把官方的线刷文件的 <code>boot.img</code> 文件拿过来，然后用 abootimg 将 zImage 刷进去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abootimg -u boot.img -k zImage</span><br></pre></td></tr></table></figure><p>再将处理好的 <code>boot.img</code> 文件放回到原来的刷机包里正常线刷就行了。刷机成功后打开手机查看参数可以看到内核版本的参数已经改变了：</p><img src="/37cb43d0/kernal_version.png" class title="kernal_version"><p>就是不知道最后为啥加了一个 dirty 的后缀…</p><p>dirty 后缀的原因找到了, 在 <code>/scrpit/setlocalversion</code> 里第 60 - 63 行, 如果有未提交的更改机会在内核后面加 <code>dirty</code> 的后缀：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Check <span class="keyword">for</span> uncommitted changes</span></span><br><span class="line">if git diff-index --name-only HEAD | grep -qv "^scripts/package"; then</span><br><span class="line">    printf '%s' -dirty</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>上面的 if 判断注释掉就就不会有 dirty 后缀了。</p><p>开机后发现有些第三方的预装 APP。这些 APP 在刷机包里对应的文件在 <code>userdata.img</code> 里。可以用 <code>simg2img</code> 将 img 文件转成 ext4 文件再用 mount 挂载编辑，然后打包回来，这样很麻烦。搜了下发现可以直接用蘑菇 ROM 助手来在图形界面下编辑预装 APP 然后打包，非常方便。将精简好的 <code>userdata.img</code> 文件放回到刷机包，刷机完成后系统会非常干净。</p><p>这篇文章参考了：</p><p><a href="https://github.com/MiCode/Xiaomi_Kernel_OpenSource/wiki/How-to-compile-kernel-standalone" target="_blank" rel="noopener">How to compile kernel standalone</a></p><p><a href="https://giglf.github.io/2018/01/31/%E7%BC%96%E8%AF%91%E5%B0%8F%E7%B1%B33td%E5%86%85%E6%A0%B8%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener">编译小米3td内核记录</a></p><p><a href="https://github.com/MiCode/Xiaomi_Kernel_OpenSource/issues/957" target="_blank" rel="noopener">求大佬发编译教程</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;10 年前的电脑可以装最新的 Windows 11，10 年前的安卓机却装不聊最新的 Android 发行版。虽然安卓开放，但上游硬件厂商提供的驱动和文档确大都闭源甚至收费的。再加上对各种商业因素的考量，一款安卓手机发布 2 到 3 年后，厂商就愉快地结束升级支持并转身投入到新机器的系统适配和维护中去了。这台用着英伟达 SoC 的手机在服务周期内虽然从 MIUI5 升级到 MIUI9 ，但 Android 版本一直停留在 4.4.4，升级内容基本是换皮。被英伟达坑了的小米坑了一众相信 MIUI 的米粉。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>解决子系统 MySQL 启动失败的问题</title>
    <link href="https://absinthes2049.github.io/3bda295d/"/>
    <id>https://absinthes2049.github.io/3bda295d/</id>
    <published>2022-02-21T14:17:00.000Z</published>
    <updated>2022-02-21T14:24:42.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>今天在 Ubuntu 子系统上登录 MySQL 是出现了下面的错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h****n@DESKTOP-*****:~$ sudo mysql</span><br><span class="line">[sudo] password <span class="keyword">for</span> h****n:</span><br><span class="line">ERROR 2002 (HY000): Can<span class="string">'t connect to local MySQL server through socket '</span>/var/run/mysqld/mysqld.sock<span class="string">' (2)</span></span><br></pre></td></tr></table></figure><p>根据报错的信息在 /var/run/mysqld/ 目录下建了一个新的 mysqld.sock 并尝试重启 MySQL 服务后又出现了后面的错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h****n@DESKTOP-*****:/run/mysqld$ sudo service mysql restart</span><br><span class="line">* Stopping MySQL database server mysqld</span><br><span class="line">* Starting MySQL database server mysqld</span><br><span class="line">su: warning: cannot change directory to /nonexistent: No such file or directory</span><br></pre></td></tr></table></figure><a id="more"></a><p>查了下应该是上次 mysql 服务器异常关机导致的，下面是解决方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql stop</span><br><span class="line">sudo usermod -d /var/lib/mysql/ mysql</span><br><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天在 Ubuntu 子系统上登录 MySQL 是出现了下面的错误：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;h****n@DESKTOP-*****:~$ sudo mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[sudo] password &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; h****n:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ERROR 2002 (HY000): Can&lt;span class=&quot;string&quot;&gt;&#39;t connect to local MySQL server through socket &#39;&lt;/span&gt;/var/run/mysqld/mysqld.sock&lt;span class=&quot;string&quot;&gt;&#39; (2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据报错的信息在 /var/run/mysqld/ 目录下建了一个新的 mysqld.sock 并尝试重启 MySQL 服务后又出现了后面的错误：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;h****n@DESKTOP-*****:/run/mysqld$ sudo service mysql restart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Stopping MySQL database server mysqld&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Starting MySQL database server mysqld&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;su: warning: cannot change directory to /nonexistent: No such file or directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://absinthes2049.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://absinthes2049.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>一次纠结的小米 6 刷机经历</title>
    <link href="https://absinthes2049.github.io/52248d2e/"/>
    <id>https://absinthes2049.github.io/52248d2e/</id>
    <published>2022-02-17T15:22:00.000Z</published>
    <updated>2022-02-17T15:24:30.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>看着存储空间不到 5 个 G 的手机决定手贱给小米 6 刷一次机，在看到 rom 列表中没有 MIUI 12 的线刷版本隐隐感到一丝不对劲，但还是艺高人胆大地选择了线刷 <a href="http://bigota.d.miui.com/9.9.3/sagit_images_9.9.3_20190904.0000.00_9.0_cn_b51d5ce3d8.tgz" target="_blank" rel="noopener">MIUI 10 9.9.3</a> + 卡刷 <a href="https://bigota.d.miui.com/20.3.26/miui_MI6_20.3.26_c8081cf18a_9.0.zip" target="_blank" rel="noopener">MIUI 12 20.6.18</a> 的路线，然而刷完 MIUI 10 在系统里刷 MIUI 12 的时候发现还是天真了。选官方 ROM 包的时候提示“rom包处于内测中 请确认已经登录有内测权限的小米账户”，现在哪里还有小米 6 的内测？退一万步讲就算有我还有等你内测审核完我才可以刷机？（你永远不知道小米为了让 MI6 用户换手机有多努力）</p><a id="more"></a><p>试了下换包偷渡没有成功（<del>手速跟不上了人老了</del>），又在网上查了下还是第三方 rec 刷入官方系统 + root 比较靠谱（不刷 root 的话会卡在开机启动界面无限循环）。 第三方 rec 用的最新的 <a href="https://dl.twrp.me/sagit/" target="_blank" rel="noopener">TWRP for sagit</a>,在电脑上装了 adb 后进手机打开开发者选项然后开启 adb 调试，用数据线连上电脑然后回到电脑在终端 adb devices 下如果有设备输出就可以继续了， 用 adb 命令重启手机到 rec 模式, 刷完后再用 adb 命令重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br><span class="line">fastboot flash recovery twrp.img</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure><p>把 miui_MI6_20.6.18_3f5b90d469_9.0.zip 拷贝进手机并重启到 rec，然后刷入这个包。刷入成功后在 twrp 的高级选项里开启 ADB Sideload，在回到电脑上用 adb 把 Magisk 包（把下载下来的 magisk 安装文件后缀 .apk 改成 .zip）用 adb 刷进手机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb sideload Magisk.zip</span><br></pre></td></tr></table></figure><p>然后可以正常重启了，一切顺利的话不会卡在开机画面上。</p><p>进入系统后更新下 Magisk，然后安装 Magisk 版的太极阳，再安装 ChiMi 3.07.07 并用太极激活，把屏幕圆角，时钟显秒和全面屏手势实体键共用等都打开并重启生效，任务栏主题用 MUYIXIU 的《遇》。至此全部搞定。启用全面屏实体键共存好像会有些掉帧，原因不明，不过习惯了不想改回来。</p><p>如果更强迫症一点还可以把官方的 rec 再刷回来，之前线刷的包里 ./images/recovery.img 这个文件就是官方的 rec 文件，直接用 adb 刷一下就可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br><span class="line">fastboot flash recovery recovery.img</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;看着存储空间不到 5 个 G 的手机决定手贱给小米 6 刷一次机，在看到 rom 列表中没有 MIUI 12 的线刷版本隐隐感到一丝不对劲，但还是艺高人胆大地选择了线刷 &lt;a href=&quot;http://bigota.d.miui.com/9.9.3/sagit_images_9.9.3_20190904.0000.00_9.0_cn_b51d5ce3d8.tgz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MIUI 10 9.9.3&lt;/a&gt; + 卡刷 &lt;a href=&quot;https://bigota.d.miui.com/20.3.26/miui_MI6_20.3.26_c8081cf18a_9.0.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MIUI 12 20.6.18&lt;/a&gt; 的路线，然而刷完 MIUI 10 在系统里刷 MIUI 12 的时候发现还是天真了。选官方 ROM 包的时候提示“rom包处于内测中 请确认已经登录有内测权限的小米账户”，现在哪里还有小米 6 的内测？退一万步讲就算有我还有等你内测审核完我才可以刷机？（你永远不知道小米为了让 MI6 用户换手机有多努力）&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>在 WSL2 Ubuntu 20.04 上安装 Hadoop 并写一个 WordCount</title>
    <link href="https://absinthes2049.github.io/b2d32093/"/>
    <id>https://absinthes2049.github.io/b2d32093/</id>
    <published>2022-01-13T03:53:00.000Z</published>
    <updated>2022-05-02T08:47:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>看过这么多 tutorial，跟着 Hadoop 的 tutorial 跑一个 Hello World 是最 suffer 的一次。看过的包括但不限于 《Hadoop 权威指南》，某乎的文章，CSDN 上的经验，最后再加上官网的文档才勉强安装好跑出 WordCound 的结果……心累。</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><ul><li>GNU/Linux。这里用的是 WSL Ubuntu-20.04</li><li>Java。 这里用的是 openjdk version “11.0.13”</li><li>ssh。</li><li>Hadoop 的安装包。可以在 <a href="https://www.apache.org/dyn/closer.cgi/hadoop/common/" target="_blank" rel="noopener">Apache Download Mirrors</a> 下载，这里用的是 hadoop-3.3.2.tar.gz</li></ul><h2 id="JDK-Enviorment-Setting"><a href="#JDK-Enviorment-Setting" class="headerlink" title="JDK Enviorment Setting"></a>JDK Enviorment Setting</h2><a id="more"></a><p>最好先设置一下 Java 环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>看下效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openjdk version &quot;11.0.13&quot; 2021-10-19</span><br><span class="line">OpenJDK Runtime Environment (build 11.0.13+8-Ubuntu-0ubuntu1.20.04)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 11.0.13+8-Ubuntu-0ubuntu1.20.04, mixed mode, sharing)</span><br></pre></td></tr></table></figure><h2 id="Hadoop-Installation"><a href="#Hadoop-Installation" class="headerlink" title="Hadoop Installation"></a>Hadoop Installation</h2><p>把 hadoop-3.3.2.tar.gz 解压到某个位置,并改名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf  hadoop*.tar.gz -C  ~/apps</span><br><span class="line"><span class="built_in">cd</span> ~/apps</span><br></pre></td></tr></table></figure><p>添加环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>把 Hadoop 环境添加到最后并保存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hadoop环境</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=~/apps/hadoop-3.3.2</span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_LIB_NATIVE_DIR=<span class="variable">$HADOOP_HOME</span>/lib/native</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br><span class="line"><span class="built_in">export</span> JAVA_LIBRAY_PATH=/usr/<span class="built_in">local</span>/hadoop/lib/native</span><br><span class="line"><span class="built_in">export</span> HADOOP_CLASSPATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib/tools.jar</span><br></pre></td></tr></table></figure><p>现在可以检验下 Hadoop 环境是不是设好了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop version</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hadoop 3.3.1</span><br><span class="line">Source code repository https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hadoop.git -r a3b9c37a397ad4188041dd80621bdeefc46885f2</span><br><span class="line">Compiled by ubuntu on 2021-06-15T05:13Z</span><br><span class="line">Compiled with protoc 3.7.1</span><br><span class="line">From source with checksum 88a4ddb2299aca054416d6b7f81ca55</span><br><span class="line">This command was run using &#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;hadoop-common-3.3.1.jar</span><br></pre></td></tr></table></figure><h2 id="Hadoop-Configuration"><a href="#Hadoop-Configuration" class="headerlink" title="Hadoop Configuration"></a>Hadoop Configuration</h2><p>Hadoop 有三种运行模式： 独立(或本地)模式(Local (Standalone) Mode)，伪分布模式(Pseudo-Distributed Mode)以及全分布模式(Fully-Distributed Mode)。 为了演示以及学习的目的，将 Hadoop 设置成伪分布模式。</p><p>定位到 /usr/local/hadoop/etc/hadoop 并修改 hadoop-env.sh：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64</span><br><span class="line"><span class="built_in">export</span> HADOOP_OPTS=<span class="string">"-Djava.library.path=<span class="variable">$&#123;HADOOP_HOME&#125;</span>/lib/native"</span></span><br></pre></td></tr></table></figure><p>先建好 <code>$HADOOP_HOME/tmp/data</code>, <code>$HADOOP_HOME/tmp/name</code> 和 <code>$HADOOP_HOME/logs</code> 然后赋权 <code>sudo chown &lt;username&gt;:&lt;group&gt; $HADOOP_HOME/tmp</code>, <code>sudo chown &lt;username&gt;:&lt;group&gt; $HADOOP_HOME/logs</code>,再修改 core-site.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/username/apps/hadoop-3.3.2/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改 hdfs-site.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/username/apps/hadoop-3.3.2/tmp/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/username/apps/hadoop-3.3.2/tmp/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们将 dfs.replication 设置为 1 ，这样 HDFS 就不会按照默认配置将文件系统块副本设置为 3。<br>接下来配置 Yarn 的单机模式。修改 mapred-site.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.application.classpath<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*:$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改 yarn-site.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_HOME,PATH,LANG,TZ,HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>到此 Hadoop 配置完成。测试以下，首先开启 ssh：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh start</span><br></pre></td></tr></table></figure><p>第一次启动的话要将 namenode 格式化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop namenode –format</span><br></pre></td></tr></table></figure><p>然后启动 Hadoop 集群：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Starting namenodes on [localhost]</span><br><span class="line">Starting datanodes</span><br><span class="line">Starting secondary namenodes [pos.baidu.com]</span><br><span class="line">Starting resourcemanager</span><br><span class="line">Starting nodemanagers</span><br></pre></td></tr></table></figure><p>看一下当前所有运行的 Java 进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">11379 Jps</span><br><span class="line">14388 ResourceManager</span><br><span class="line">14173 SecondaryNameNode</span><br><span class="line">13742 NameNode</span><br><span class="line">13902 DataNode</span><br><span class="line">14542 NodeManager</span><br><span class="line">14943 Jps</span><br></pre></td></tr></table></figure><p>如归 NameNode 和 DataNode 未正常启动的话可以参考<a href="https://www.projectpro.io/questions/4920/not-able-to-see-namenode-and-datanode-when-jps-is-used" target="_blank" rel="noopener">这里</a>.</p><p>现在可以查看 Hadoop 的 web 界面了： <a href="http://localhost:9870" target="_blank" rel="noopener">http://localhost:9870</a></p><img src="/b2d32093/hadoop_web_page.jpg" class title="Hadoop_webpage"><p>查看资源管理页面： <a href="http://localhost:8088/" target="_blank" rel="noopener">http://localhost:8088/</a></p><img src="/b2d32093/cluster.jpg" class title="cluster"><h2 id="WordCount"><a href="#WordCount" class="headerlink" title="WordCount"></a>WordCount</h2><p>终于可以用 Hadoop 来干活了，比如写一个 WordCount。</p><p>首先准备下数据。假如：</p><ul><li>/wordcount/input 是 HDFS 里的输入目录</li><li>/wordcount/output 是 HDFS 里的输出目录</li></ul><p>在 HDFS 里创建 input 路径。这里先不要建 output 路径，否则后面执行 MR 任务时会因为路径存在而报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mkdir -p /wordcount/input</span><br></pre></td></tr></table></figure><p>我们将准备两个文件作为输入文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## file01</span><br><span class="line">Hello World Bye World</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## file02</span><br><span class="line">Hello Hadoop Goodbye Hadoop</span><br></pre></td></tr></table></figure><p>将这两个文件在 ~/wordcount/ 路径下，并导入到 HDFS:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -copyFromLocal ./file0* /wordcount/input</span><br></pre></td></tr></table></figure><p>现在可以 Mapper 和 Reducer 的代码了。这里直接抄官方最新版：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenizerMapper</span></span></span><br><span class="line"><span class="class">       <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> Text word = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context</span></span></span><br><span class="line"><span class="function"><span class="params">                    )</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">      StringTokenizer itr = <span class="keyword">new</span> StringTokenizer(value.toString());</span><br><span class="line">      <span class="keyword">while</span> (itr.hasMoreTokens()) &#123;</span><br><span class="line">        word.set(itr.nextToken());</span><br><span class="line">        context.write(word, one);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntSumReducer</span></span></span><br><span class="line"><span class="class">       <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>,<span class="title">IntWritable</span>,<span class="title">Text</span>,<span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntWritable result = <span class="keyword">new</span> IntWritable();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values,</span></span></span><br><span class="line"><span class="function"><span class="params">                       Context context</span></span></span><br><span class="line"><span class="function"><span class="params">                       )</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (IntWritable val : values) &#123;</span><br><span class="line">        sum += val.get();</span><br><span class="line">      &#125;</span><br><span class="line">      result.set(sum);</span><br><span class="line">      context.write(key, result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">    Job job = Job.getInstance(conf, <span class="string">"word count"</span>);</span><br><span class="line">    job.setJarByClass(WordCount<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    job.setMapperClass(TokenizerMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    job.setCombinerClass(IntSumReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    job.setReducerClass(IntSumReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">    FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">    System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存为 ~/java_file/wordcount/WordCount.java, 接下来编译这个 java 文件并创建一个 jar:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/java_file/wordcount/</span><br><span class="line">hadoop com.sun.tools.javac.Main WordCount.java</span><br><span class="line">jar cf wc.jar WordCount*.class</span><br></pre></td></tr></table></figure><p>然后我们运行这段代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar wc.jar WordCount /wordcount/input /wordcount/output</span><br></pre></td></tr></table></figure><p>如果成功运行完成，run 出来的结果应该在 /wordcount/output 里面，我们来查看下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -cat &#x2F;wordcount&#x2F;output&#x2F;part-r-00000</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Bye 1</span><br><span class="line">Goodbye 1</span><br><span class="line">Hadoop 2</span><br><span class="line">Hello 2</span><br><span class="line">World 2</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;看过这么多 tutorial，跟着 Hadoop 的 tutorial 跑一个 Hello World 是最 suffer 的一次。看过的包括但不限于 《Hadoop 权威指南》，某乎的文章，CSDN 上的经验，最后再加上官网的文档才勉强安装好跑出 WordCound 的结果……心累。&lt;/p&gt;
&lt;h2 id=&quot;Prerequisites&quot;&gt;&lt;a href=&quot;#Prerequisites&quot; class=&quot;headerlink&quot; title=&quot;Prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;GNU/Linux。这里用的是 WSL Ubuntu-20.04&lt;/li&gt;
&lt;li&gt;Java。 这里用的是 openjdk version “11.0.13”&lt;/li&gt;
&lt;li&gt;ssh。&lt;/li&gt;
&lt;li&gt;Hadoop 的安装包。可以在 &lt;a href=&quot;https://www.apache.org/dyn/closer.cgi/hadoop/common/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apache Download Mirrors&lt;/a&gt; 下载，这里用的是 hadoop-3.3.2.tar.gz&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;JDK-Enviorment-Setting&quot;&gt;&lt;a href=&quot;#JDK-Enviorment-Setting&quot; class=&quot;headerlink&quot; title=&quot;JDK Enviorment Setting&quot;&gt;&lt;/a&gt;JDK Enviorment Setting&lt;/h2&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://absinthes2049.github.io/categories/Big-Data/"/>
    
    <category term="Hadoop" scheme="https://absinthes2049.github.io/categories/Hadoop/"/>
    
    
    <category term="Big Data" scheme="https://absinthes2049.github.io/tags/Big-Data/"/>
    
    <category term="Hadoop" scheme="https://absinthes2049.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>SQL 窗口函数简单总结</title>
    <link href="https://absinthes2049.github.io/419d32e/"/>
    <id>https://absinthes2049.github.io/419d32e/</id>
    <published>2022-01-05T14:00:00.000Z</published>
    <updated>2022-01-05T15:17:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这几天系统复习了下 SQL 的窗口函数，补全了很多之前的知识盲点。虽然之前工作中窗口函数用的不多（没办法，之前的工作对 SQL 并没有很依赖，实际经验积累也就很鸡肋了），不过以现在的数据分析师技术栈来看，不会窗口函数都不敢说自己懂 SQL 了（再不掌握哪些可恶的窗口函数，小孩哪能手撕 offer，祖国哪有栋梁之才）</p><p>大多数网站对窗口函数的定义大都是可以对数据库数据进行实时分析处理的函数，也叫OLAP函数（Online Anallytical Processing，联机分析处理）。我对窗口函数的理解是，对数据分区排序（不一定都要有），并按照每行数据的在分区内的位置以及排序的位次来进行某种计算或处理，并将结果附加在原来的数据上同时不改变行数。</p><a id="more"></a><p>窗口函数的语法微软是<a href="https://docs.microsoft.com/zh-cn/sql/t-sql/queries/select-over-clause-transact-sql?view=sql-server-ver15#syntax" target="_blank" rel="noopener">这样定义的</a>,而 Oracle 是<a href="https://docs.oracle.com/cd/E11882_01/server.112/e41084/functions004.htm#SQLRF06174" target="_blank" rel="noopener">这样定义</a>，两者大同小异，其实大多数 DBMS 都对窗口函数提供了非常接近的语法支持：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">window_function (expression) OVER (</span><br><span class="line">   [ PARTITION BY part_list ]</span><br><span class="line">   [ ORDER BY order_list ]</span><br><span class="line">   [ &#123; ROWS | RANGE &#125; BETWEEN frame_start AND frame_end ] )</span><br></pre></td></tr></table></figure><p>窗口函数先按 part_list 对数据进行分区，再按 order_list 对每个分区内的数据进行排序，最后按 frame （如果有的话）来确定当前某行的窗口，然后用 window_function 来进行某些计算，将结果附加在当前行内。</p><p>窗口函数不会改变被检索出的行的行数，而聚合函数会对每个分区只保留一个行。从执行顺序上来看，聚合函数再窗口函数的后面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+--------+   +---------+   +----------+   +--------+   +---------+   +--------+   +--------+</span><br><span class="line">|  FROM  +--&gt;|  WHERE  +--&gt;| GROUP BY +--&gt;+ HAVING +--&gt;+ SELECT  +--&gt;+ WINDOW +--&gt;+ORDER BY|</span><br><span class="line">+--------+   +---------+   +----------+   +--------+   +---------+   +--------+   +--------+</span><br></pre></td></tr></table></figure><p>{ ROWS | RANGE } BETWEEN frame_start AND frame_end ] 需要重点标记一下。</p><p>ROWS BETWEEN 很明显是行的范围，比如 ROWS BETWEEN 3 PRECEDING AND 3 FOLLOWING 是指以当前行为基准前面三行和后面三行总共 7 行为窗口；而 ROWS BETWEEN UNBOUNDED  PRECEDING AND CURRENT ROW 则表示该分区内当前行以及当前行之前的所有行为窗口。</p><p>RANGE BETWEEN 则表示数据的选择范围，比如 RANGE BETWEEN 3 PRECEDING AND 3 FOLLOWING 则假设当前行的值为 v，那窗口的范围为 满足数值在 [v - 3, v + 3] 范围内的当前分区内的所有行。</p><p>大多数情况下其实不会显式地指定窗口范围，这时 DBMS 会按情况默认选择一个窗口。比如当 ORDER BY 后面没有指定窗口时，窗口默认为 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW 即分区内包括当前行在内的之前的所有行；而当 ORDER BY 从句也没有时，窗口则为 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING 即当前分区内的所有行。</p><p>窗口函数可以分为聚合函数和专有窗口函数。聚合函数我们在不用窗口函数时也可以经常看到：MIN, MAX, AVG, SUM, COUNT… 专有窗口函数只会在使用窗口函数时使用，按用途可以分为取值函数：FIRST_VALUE, LAST_VALUE, LEAD, LAG… 和排序函数： RANK, DENSE_RANK, ROW_NUMBER… 不同的 DBMS 可能还会有独家的专有窗口函数。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这几天系统复习了下 SQL 的窗口函数，补全了很多之前的知识盲点。虽然之前工作中窗口函数用的不多（没办法，之前的工作对 SQL 并没有很依赖，实际经验积累也就很鸡肋了），不过以现在的数据分析师技术栈来看，不会窗口函数都不敢说自己懂 SQL 了（再不掌握哪些可恶的窗口函数，小孩哪能手撕 offer，祖国哪有栋梁之才）&lt;/p&gt;
&lt;p&gt;大多数网站对窗口函数的定义大都是可以对数据库数据进行实时分析处理的函数，也叫OLAP函数（Online Anallytical Processing，联机分析处理）。我对窗口函数的理解是，对数据分区排序（不一定都要有），并按照每行数据的在分区内的位置以及排序的位次来进行某种计算或处理，并将结果附加在原来的数据上同时不改变行数。&lt;/p&gt;</summary>
    
    
    
    <category term="SQL" scheme="https://absinthes2049.github.io/categories/SQL/"/>
    
    
    <category term="SQL" scheme="https://absinthes2049.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>2021年度总结与2022年规划</title>
    <link href="https://absinthes2049.github.io/c074f8eb/"/>
    <id>https://absinthes2049.github.io/c074f8eb/</id>
    <published>2021-12-31T15:53:08.000Z</published>
    <updated>2022-01-05T15:33:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="2021-年总结"><a href="#2021-年总结" class="headerlink" title="2021 年总结"></a>2021 年总结</h2><ul><li>掐着点看完了沐神的动手学习深度学习视频（仪式感要拉满，学习效果另说:) ）</li><li>系统学了下 Excel VBA ，总结了下 VBA 面向对象学习的方法（就当学了个玩具语言）</li><li>算法和数据结构有了一点了解（知道几个名词其实就可以吹了…啥，徒手写一个？）</li><li>开始写年度总结（就硬凑数？）</li></ul><h2 id="2022-年规划"><a href="#2022-年规划" class="headerlink" title="2022 年规划"></a>2022 年规划</h2><ul><li>完成深度学习和机器学习的知识框架构建，方法论和落地能力两开花，开始看论文追踪前沿技术，并有一两个拿得出手的项目</li><li>尽量掌握大数据通用技术栈，能在本地装好 Hadoop 并写点代码比划下，能写出不怎么难看的 Spark 代码并部署在 Airflow 上</li><li>LeeCode 高频题刷完</li><li>拿下 Java SE 和 C++，Python 看几个项目源码</li><li>把上年度书单里没看完的书看完，并在本年度书单里加一些书</li><li>治好拖延症，平衡作息时间，继续心理建设</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;2021-年总结&quot;&gt;&lt;a href=&quot;#2021-年总结&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>VBA 面向对象编程</title>
    <link href="https://absinthes2049.github.io/4283b8c4/"/>
    <id>https://absinthes2049.github.io/4283b8c4/</id>
    <published>2021-12-14T14:23:37.000Z</published>
    <updated>2021-12-18T11:09:52.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>VBA 其实是可以(有限地)支持面向对象编程的。在 VBA 里有一些内置的类：Collection, Workbook, Worksheet 等等，但我们可以用 Class Modules 来构建自己需要的类。</p><p>创建一个类时，insert 后面选 Class Module, 然后在属性窗口修改默认的命名（如 CTest）。然后在第一行声明一个变量：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">'Class Module： CTest</span></span><br><span class="line"><span class="keyword">Public</span> Name <span class="keyword">As</span> <span class="built_in">String</span></span><br></pre></td></tr></table></figure><p>现在在普通的 Module 里就可以引用这个类了：</p><a id="more"></a><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Dim</span> clsSomeObject <span class="keyword">As</span> <span class="keyword">New</span> CTest</span><br><span class="line"></span><br><span class="line"><span class="keyword">Sub</span> PrintTestString()</span><br><span class="line">    <span class="keyword">Dim</span> clsSomeObject <span class="keyword">As</span> <span class="keyword">New</span> CTest</span><br><span class="line">    clsSomeObject.Name = <span class="string">"Hello, world"</span></span><br><span class="line">    Debug.Print clsSomeObject.Name</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><h2 id="Class-Module-的组成"><a href="#Class-Module-的组成" class="headerlink" title="Class Module 的组成"></a>Class Module 的组成</h2><p>一个典型的 Class Module 由 4 个部分组成：</p><ol><li>Methods – functions or subs</li><li>Member variables – variables</li><li>Properties– 类别属于 functions 或者 subs 但在类中却像 variables 一样</li><li>Events – 被某些事件触发的一类 subs</li></ol><p>一个简单的 Class Module 示例：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">'Class Module： CAccount</span></span><br><span class="line"><span class="comment">'Member variable</span></span><br><span class="line"><span class="keyword">Private</span> fBalance <span class="keyword">As</span> <span class="built_in">Double</span></span><br><span class="line"></span><br><span class="line"><span class="comment">'Properties</span></span><br><span class="line"><span class="keyword">Property</span> <span class="keyword">Get</span> Balance() <span class="keyword">As</span> <span class="built_in">Double</span></span><br><span class="line">    Balance = fBalance</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Property</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Property</span> <span class="keyword">Let</span> Balance(value <span class="keyword">As</span> <span class="built_in">Double</span>)</span><br><span class="line">    fBalance = value</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Property</span></span><br><span class="line"></span><br><span class="line"><span class="comment">'Event - triggered when class created</span></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> Class_Initialize()</span><br><span class="line">    fBalance = <span class="number">100</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="comment">' Methods</span></span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Sub</span> Withdraw(amount <span class="keyword">As</span> <span class="built_in">Double</span>)</span><br><span class="line">    fBalance = fBalance - amount</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Sub</span> Deposit(amount <span class="keyword">As</span> <span class="built_in">Double</span>)</span><br><span class="line">    fBalance = fBalance + amount</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>然后引用这个类：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> PrintAccount()</span><br><span class="line">    <span class="keyword">Dim</span> clsAccount <span class="keyword">As</span> <span class="keyword">New</span> CAccount</span><br><span class="line">    </span><br><span class="line">    Debug.Print <span class="string">"At first you have: "</span> &amp; clsAccount.Balance</span><br><span class="line">    </span><br><span class="line">    clsAccount.Deposit <span class="number">50</span></span><br><span class="line">    </span><br><span class="line">    Debug.Print <span class="string">"After deposit you have: "</span> &amp; clsAccount.Balance</span><br><span class="line">    </span><br><span class="line">    clsAccount.Withdraw <span class="number">100</span></span><br><span class="line">    </span><br><span class="line">    Debug.Print <span class="string">"After withdraw you have: "</span> &amp; clsAccount.Balance</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">At first you have: 100</span><br><span class="line">After deposit you have: 150</span><br><span class="line">After withdraw you have: 50</span><br></pre></td></tr></table></figure><h2 id="Class-Module-Methods"><a href="#Class-Module-Methods" class="headerlink" title="Class Module Methods"></a>Class Module Methods</h2><p>在 VBA 里类方法是类的 subs 或 functions. 和类变量一样，类方法的属性可以是 Public 或 Private.</p><p>举个栗子：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">'Class Module： CExample</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Sub</span> PrintText(<span class="keyword">text</span> <span class="keyword">As</span> <span class="built_in">String</span>)</span><br><span class="line">    Debug.Print <span class="keyword">text</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Function</span> Calculate(amount <span class="keyword">As</span> <span class="built_in">Double</span>) <span class="keyword">As</span> <span class="built_in">Double</span></span><br><span class="line">    Calculate = amount - GetDeduction</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">'Private 的类方法只能在类内调用</span></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Function</span> GetDeduction() <span class="keyword">As</span> <span class="built_in">Double</span></span><br><span class="line">    GetDuction = <span class="number">2.78</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><p>然后调用这个类：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Public</span> <span class="keyword">Sub</span> ClassMembers()</span><br><span class="line">    <span class="keyword">Dim</span> oSimple <span class="keyword">As</span> <span class="keyword">New</span> CExample</span><br><span class="line">    oSimple.PrintText <span class="string">"Hello"</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">Dim</span> total <span class="keyword">As</span> <span class="built_in">Double</span></span><br><span class="line">    total = oSimple.Calculate(<span class="number">22.44</span>)</span><br><span class="line">    Debug.Print total</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><h2 id="Class-Module-Member-Variables"><a href="#Class-Module-Member-Variables" class="headerlink" title="Class Module Member Variables"></a>Class Module Member Variables</h2><p>类变量和 VBA 中普通的变量非常相似，唯一的区别是在定义是用 Private 或 Public 而不是 Dim.</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">'Class Module： CBankAccount</span></span><br><span class="line"><span class="keyword">Private</span> fBalance <span class="keyword">As</span> <span class="built_in">Double</span></span><br><span class="line"><span class="keyword">Public</span> sName <span class="keyword">As</span> <span class="built_in">String</span></span><br></pre></td></tr></table></figure><p>用 Public 关键字定义的变量意味着我们可以在类外访问这个变量：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">'这段 code 会报错</span></span><br><span class="line"><span class="keyword">Sub</span> DemoBankAccount()</span><br><span class="line">    <span class="keyword">Dim</span> oAccount <span class="keyword">As</span> <span class="keyword">New</span> CBankAccount</span><br><span class="line">    </span><br><span class="line">    <span class="comment">'Account 是可以访问的</span></span><br><span class="line">    oAccount.sName = <span class="string">"Trump"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">'但 fBalance 不行</span></span><br><span class="line">    oAccount.fBalance = <span class="number">100</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>上面的例子中 fBalance 无法再类外被访问，因为在声明是这个变量是 Private 的. </p><h2 id="Class-Module-Properties"><a href="#Class-Module-Properties" class="headerlink" title="Class Module Properties"></a>Class Module Properties</h2><ol><li>Get - 从类中返回一个 object 或 value</li><li>Let - 在类中设置一个 value</li><li>Set - 在类中设置一个 object</li></ol><h3 id="VBA-Property-的格式"><a href="#VBA-Property-的格式" class="headerlink" title="VBA Property 的格式"></a>VBA Property 的格式</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Public</span> <span class="keyword">Property</span> <span class="keyword">Get</span> () <span class="keyword">As</span> Type</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Property</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Property</span> <span class="keyword">Let</span> (varname <span class="keyword">As</span> Type )</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Property</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Property</span> <span class="keyword">Set</span> (varname <span class="keyword">As</span> Type )</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Property</span></span><br></pre></td></tr></table></figure><p>Property 其实就是类的一种 sub. Property 的目的是在类外访问或者修改类内的私有变量. 那为什么不直接在类内用 Public 变量呢？参考下面的 例子. 假设我们用一个 class 来维护一个国家列表，我们可以把这个列表用 array 存起来：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">'Class Module： CCountry</span></span><br><span class="line">Public arrCountries as Variant</span><br><span class="line"></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> Class_Initialize()</span><br><span class="line">    <span class="keyword">ReDim</span> arrCountries(<span class="number">1</span> <span class="keyword">To</span> <span class="number">1000</span>)</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>在类外如果用户想得到这个列表的 count 的话需要用以下的方法：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> GetNumCountries()</span><br><span class="line">    <span class="keyword">Dim</span> clsCountry <span class="keyword">As</span> CCountry</span><br><span class="line">    NumCountries = UBound(clsCountry.arrCountries) - LBound(clsCountry.arrCountries)</span><br><span class="line">    Debug.Print NumCountries</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>那么问题来了，<del>挖掘机技术哪家…</del> :</p><ul><li>为了得到国家的数量你需要先知道这个 list 是以什么方式存储的（这个 case 里是 array）</li><li>如果我们把 Array 变成 Collection， 在我们的代码里所有引用这个 Array 的地方都需要更新</li></ul><p>为了避免上述问题在类里我们可以这样返回国家的数量：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">'Class Module： CCountry</span></span><br><span class="line"><span class="keyword">Private</span> arrCountries() <span class="keyword">As</span> <span class="built_in">String</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Function</span> Count() <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    Count = UBound(arrCountries) + <span class="number">1</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><p>然后在类外这样写：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> GetNumCountries()</span><br><span class="line">    <span class="keyword">Dim</span> clsCountry <span class="keyword">As</span> <span class="keyword">New</span> CCountry</span><br><span class="line">    Debug.Print <span class="string">"Number of countries is "</span> &amp; clsCountry.Count</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>当我们要把 Array 改成用 Collection 来存储国家列表时，只需要在类定义里修改如下，而在类外的代码无需改变：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">'Class Module： CCountry</span></span><br><span class="line"><span class="keyword">Private</span> collCountries() <span class="keyword">As</span> Collection</span><br><span class="line"></span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Function</span> Count() <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    Count = collCountries.Count</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><p>这样在类外引用时只需要引用 Count 函数就可以了，无须指导类内国家列表时如何定义的。</p><p>在上面的例子中我们用了一些 sub 和 function 来处理需求，但 Property 还有更优雅的解决方案。</p><h3 id="Using-a-Property-instead-of-a-Function-Sub"><a href="#Using-a-Property-instead-of-a-Function-Sub" class="headerlink" title="Using a Property instead of a Function/Sub"></a>Using a Property instead of a Function/Sub</h3><p>我们可以创建一个 Count Property 而不是 Count 函数：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Property</span> <span class="keyword">Get</span> Count() <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    Count = UBound(arrCountries) - LBound(arrCountries) + <span class="number">1</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Property</span></span><br></pre></td></tr></table></figure><p>用 Property 与用 Function 还是有所不同的。通常我们还会写一个 Let Property：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">'Class Module： CPropertyTest</span></span><br><span class="line"><span class="keyword">Private</span> fTotalCost <span class="keyword">As</span> <span class="built_in">Double</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Property</span> <span class="keyword">Get</span> TotalCost() <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    TotalCost = fTotalCost</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Property</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Property</span> <span class="keyword">Let</span> TotalCost(value <span class="keyword">As</span> <span class="built_in">Long</span>)</span><br><span class="line">    fTotalCost = value</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Property</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> Class_Initialize()</span><br><span class="line">    fTotalCost = <span class="number">100</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>通过 Let 我们可以向用一个变量一样用这个 Property：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> TestProperty()</span><br><span class="line">    <span class="keyword">Dim</span> clsTProperty <span class="keyword">As</span> <span class="keyword">New</span> CPropertyTest</span><br><span class="line">    clsTProperty.TotalCost = <span class="number">50</span></span><br><span class="line">    Debug.Print clsTProperty.TotalCost</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>通过 Let 和 Get 我们可以用同样的 name 来引用 Let 或 Get Property, 从而达到像使用变量一样使用 Property. 如果使用 sub 或 function 我们可能要把代码写成这样：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clsTProperty .SetTotalCost <span class="number">50</span></span><br><span class="line">value = clsTProperty.GetTotalCost</span><br></pre></td></tr></table></figure><p>第三个 VBA Property 是 Set. Set 的用法和 Let 类似但是 Set 用来对 object 赋值。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">'Class Module： CPropertyTest</span></span><br><span class="line"><span class="keyword">Private</span> collPrices <span class="keyword">As</span> Collection</span><br><span class="line"></span><br><span class="line"><span class="keyword">Property</span> <span class="keyword">Get</span> prices() <span class="keyword">As</span> Collection</span><br><span class="line">    <span class="keyword">Set</span> prices = collPrices</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Property</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Property</span> <span class="keyword">Set</span> prices(newPrices <span class="keyword">As</span> Collection)</span><br><span class="line">    <span class="keyword">Set</span> collPrices = newPrices</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Property</span></span><br></pre></td></tr></table></figure><p>在类外我们可以这样用这个类：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Option</span> <span class="keyword">Explicit</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Sub</span> TestLetSet()</span><br><span class="line">    <span class="keyword">Dim</span> Prices <span class="keyword">As</span> <span class="keyword">New</span> Collection</span><br><span class="line">    Prices.Add <span class="number">21.23</span></span><br><span class="line">    Prices.Add <span class="number">22.12</span></span><br><span class="line">    Prices.Add <span class="number">20.12</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">Dim</span> clsCurrency <span class="keyword">As</span> <span class="keyword">New</span> CCurrency</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">Set</span> clsCurrency.Prices = Prices</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">Dim</span> PricesCopy <span class="keyword">As</span> Collection</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">Set</span> PricesCopy = clsCurrency.Prices</span><br><span class="line">    </span><br><span class="line">    PrintCollection Prices, <span class="string">"Prices"</span></span><br><span class="line">    PrintCollection PricesCopy, <span class="string">"Copy"</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Sub</span> PrintCollection(c <span class="keyword">As</span> Collection, name <span class="keyword">As</span> <span class="built_in">String</span>)</span><br><span class="line"></span><br><span class="line">    Debug.Print vbNewLine &amp; <span class="string">"Printing "</span> &amp; name &amp; <span class="string">":"</span></span><br><span class="line"></span><br><span class="line">    Dim item As Variant</span><br><span class="line">    <span class="keyword">For</span> <span class="keyword">Each</span> item <span class="keyword">In</span> c</span><br><span class="line">        Debug.Print item</span><br><span class="line">    <span class="keyword">Next</span> item</span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>有一个需要注意的点事当我们用 Set 时我们其实在引用同一个 collection. Set 并没有创造 collection 的副本。</p><h2 id="Class-Module-Events"><a href="#Class-Module-Events" class="headerlink" title="Class Module Events"></a>Class Module Events</h2><p>Class Module 有两个 Events:</p><ol><li>Initialize – 当类有新的对象创建时触发</li><li>Terminate – 当类的对象被删除时触发</li></ol><p>Events 有点像 C++ 中的构造函数和析构函数。在大多数语言中，我们可以传递参数给构造函数但是在 VBA 中并不能。</p><h3 id="Initialize"><a href="#Initialize" class="headerlink" title="Initialize"></a>Initialize</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">'Class Module： CSimple</span></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> Class_Initialize()</span><br><span class="line">    MsgBox <span class="string">"Class is being initialized"</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> Class_Terminate()</span><br><span class="line">    MsgBox <span class="string">"Class is being terminated"</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Sub</span> PrintHello()</span><br><span class="line">    Debug.Print <span class="string">"Hello"</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>在下面的 case 里， clsSimple 在我们第一次引用时才会被创建出来:</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> ClassEventsInit()</span><br><span class="line">    <span class="keyword">Dim</span> clsSimple <span class="keyword">As</span> <span class="keyword">New</span> CSimple</span><br><span class="line"></span><br><span class="line">    <span class="comment">' Initialize occurs here</span></span><br><span class="line">    clsSimple.PrintHello</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>用 Set 还是 New 来创建新对象是还是有区别的。在下面的 case 里用 Set 来创建新对象：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> ClassEventsInit2()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Dim</span> clsSimple <span class="keyword">As</span> CSimple</span><br><span class="line">    </span><br><span class="line">    <span class="comment">' Initialize occurs here</span></span><br><span class="line">    <span class="keyword">Set</span> clsSimple = <span class="keyword">New</span> CSimple</span><br><span class="line">    clsSimple.PrintHello</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>正如之前所说， 我们无法给 Initialize 传递参数。如果确实要做的话我们需要首先用一个函数来创建一个对象：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">'Class Module： CSimple</span></span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Sub</span> Init(Price <span class="keyword">As</span> <span class="built_in">Double</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>在类外部调用时：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Public</span> <span class="keyword">Sub</span> test()</span><br><span class="line">    <span class="keyword">Dim</span> clsSimple <span class="keyword">As</span> CSimple</span><br><span class="line">    <span class="keyword">Set</span> clsSimple = CreateSimpleObject(<span class="number">199.99</span>)</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Function</span> CreateSimpleObject(Price <span class="keyword">As</span> <span class="built_in">Double</span>) <span class="keyword">As</span> clsSimple</span><br><span class="line">    <span class="keyword">Dim</span> clsSimple <span class="keyword">As</span> <span class="keyword">New</span> CSimple</span><br><span class="line">    clsSimple.Init Price</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">Set</span> CreateSimpleObject = clsSimple</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><h3 id="Terminate"><a href="#Terminate" class="headerlink" title="Terminate"></a>Terminate</h3><p>当我们将类的对象设置为 Nothing 时， Terminate 也会被触发：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> ClassEventTerminate()</span><br><span class="line">    <span class="keyword">Dim</span> clsSimple <span class="keyword">As</span> CSimple</span><br><span class="line">    <span class="keyword">Set</span> clsSimple = <span class="keyword">New</span> CSimple</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">Set</span> clsSimple = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://www.cnblogs.com/maweifeng/articles/198853.html" target="_blank" rel="noopener">https://www.cnblogs.com/maweifeng/articles/198853.html</a></li><li>[2] <a href="https://excelmacromastery.com/vba-class-modules/#Class_Module_versus_Objects" target="_blank" rel="noopener">https://excelmacromastery.com/vba-class-modules/#Class_Module_versus_Objects</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;VBA 其实是可以(有限地)支持面向对象编程的。在 VBA 里有一些内置的类：Collection, Workbook, Worksheet 等等，但我们可以用 Class Modules 来构建自己需要的类。&lt;/p&gt;
&lt;p&gt;创建一个类时，insert 后面选 Class Module, 然后在属性窗口修改默认的命名（如 CTest）。然后在第一行声明一个变量：&lt;/p&gt;
&lt;figure class=&quot;highlight vb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&#39;Class Module： CTest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Public&lt;/span&gt; Name &lt;span class=&quot;keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在在普通的 Module 里就可以引用这个类了：&lt;/p&gt;</summary>
    
    
    
    <category term="VBA" scheme="https://absinthes2049.github.io/categories/VBA/"/>
    
    
    <category term="VBA" scheme="https://absinthes2049.github.io/tags/VBA/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的推荐算法模型</title>
    <link href="https://absinthes2049.github.io/3f869a17/"/>
    <id>https://absinthes2049.github.io/3f869a17/</id>
    <published>2021-08-08T14:43:37.000Z</published>
    <updated>2021-08-31T01:35:08.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>日常生活中经常能看到利用被收集到的数据来提供建议或者推荐产品的例子。比如在京东购买了关于 Hadoop 的书，JD App 就会看到 Spark 相关的书排在很靠前的位置。本文将尝试用 Python 来实现一个简单的推荐算法模型。</p><p>假设我们有如下用户数据：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">users_interests = [ </span><br><span class="line">    [<span class="string">"Hadoop"</span>, <span class="string">"Big Data"</span>, <span class="string">"HBase"</span>, <span class="string">"Java"</span>, <span class="string">"Spark"</span>, <span class="string">"Storm"</span>, <span class="string">"Cassandra"</span>], </span><br><span class="line">    [<span class="string">"NoSQL"</span>, <span class="string">"MongoDB"</span>, <span class="string">"Cassandra"</span>, <span class="string">"HBase"</span>, <span class="string">"Postgres"</span>], </span><br><span class="line">    [<span class="string">"Python"</span>, <span class="string">"scikit-learn"</span>, <span class="string">"scipy"</span>, <span class="string">"numpy"</span>, <span class="string">"statsmodels"</span>, <span class="string">"pandas"</span>], </span><br><span class="line">    [<span class="string">"R"</span>, <span class="string">"Python"</span>, <span class="string">"statistics"</span>, <span class="string">"regression"</span>, <span class="string">"probability"</span>], </span><br><span class="line">    [<span class="string">"machine learning"</span>, <span class="string">"regression"</span>, <span class="string">"decision trees"</span>, <span class="string">"libsvm"</span>], </span><br><span class="line">    [<span class="string">"Python"</span>, <span class="string">"R"</span>, <span class="string">"Java"</span>, <span class="string">"C++"</span>, <span class="string">"Haskell"</span>, <span class="string">"programming languages"</span>], </span><br><span class="line">    [<span class="string">"statistics"</span>, <span class="string">"probability"</span>, <span class="string">"mathematics"</span>, <span class="string">"theory"</span>], </span><br><span class="line">    [<span class="string">"machine learning"</span>, <span class="string">"scikit-learn"</span>, <span class="string">"Mahout"</span>, <span class="string">"neural networks"</span>], </span><br><span class="line">    [<span class="string">"neural networks"</span>, <span class="string">"deep learning"</span>, <span class="string">"Big Data"</span>, <span class="string">"artificial intelligence"</span>], </span><br><span class="line">    [<span class="string">"Hadoop"</span>, <span class="string">"Java"</span>, <span class="string">"MapReduce"</span>, <span class="string">"Big Data"</span>], </span><br><span class="line">    [<span class="string">"statistics"</span>, <span class="string">"R"</span>, <span class="string">"statsmodels"</span>], </span><br><span class="line">    [<span class="string">"C++"</span>, <span class="string">"deep learning"</span>, <span class="string">"artificial intelligence"</span>, <span class="string">"probability"</span>], </span><br><span class="line">    [<span class="string">"pandas"</span>, <span class="string">"R"</span>, <span class="string">"Python"</span>], </span><br><span class="line">    [<span class="string">"databases"</span>, <span class="string">"HBase"</span>, <span class="string">"Postgres"</span>, <span class="string">"MySQL"</span>, <span class="string">"MongoDB"</span>], </span><br><span class="line">    [<span class="string">"libsvm"</span>, <span class="string">"regression"</span>, <span class="string">"support vector machines"</span>] </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>列表 users_interests 中的每一个子列表都是一个用户的兴趣点。比如倒数第三位用户同时对 Python, R 和 pandas 感兴趣。</p><p>在某些情形下用过往的经验来人工推荐，比如图书馆的图书管理员会很熟练的根据你的兴趣或者你喜欢的书籍来推荐书籍。但更一般的情况下，我们往往需要在没有先验数据的情况下对海量数据进行处理，这超出了人的经验和想象力。我们来让 Python 做这件事。</p><h2 id="直接推荐流行事物"><a href="#直接推荐流行事物" class="headerlink" title="直接推荐流行事物"></a>直接推荐流行事物</h2><p>一个比较简单的方法是直接推荐我们数据里面比较流行的东西：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">users_interests_unstack = list(chain(*users_interests))</span><br><span class="line">popular_interests = Counter(users_interests_unstack).most_common()</span><br><span class="line">popular_interests</span><br><span class="line"><span class="comment">#### 得到的结果会是下面这样</span></span><br><span class="line"><span class="comment"># [('Python', 4),</span></span><br><span class="line"><span class="comment">#  ('R', 4),</span></span><br><span class="line"><span class="comment">#  ('Big Data', 3),</span></span><br><span class="line"><span class="comment">#  ('HBase', 3),</span></span><br><span class="line"><span class="comment">#  ('Java', 3),</span></span><br><span class="line"><span class="comment">#  ......</span></span><br><span class="line"><span class="comment">####</span></span><br></pre></td></tr></table></figure><p>然后可以向用户推荐那些流行的但他尚未感兴趣的东西：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">most_popular_new_interests</span><span class="params">(user_interests, max_results=<span class="number">5</span>)</span>:</span></span><br><span class="line">    suggestions = []</span><br><span class="line">    <span class="keyword">for</span> interest, frequency <span class="keyword">in</span> popular_interests:</span><br><span class="line">        <span class="keyword">if</span> interest <span class="keyword">not</span> <span class="keyword">in</span> user_interests:</span><br><span class="line">            suggestions.append(interest, frequency)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> suggestions[:max_results]</span><br></pre></td></tr></table></figure><p>用上面的函数对用户 1 进行预测。用户 1 的兴趣是：[“NoSQL”, “MongoDB”, “Cassandra”, “HBase”, “Postgres”], 运行函数的结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">most_popular_new_interests(users_interests[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line"><span class="comment"># [('Python', 4), ('R', 4), ('Big Data', 3), ('Java', 3), ('statistics', 3)]</span></span><br></pre></td></tr></table></figure><p>当然，很多人喜欢 Python，所以我们的目标用户也会喜欢 Python 的假设并不正确。但对于没有任何先验数据的新注册用户，这不失为一个好的方法。</p><h2 id="基于用户的协同过滤方法"><a href="#基于用户的协同过滤方法" class="headerlink" title="基于用户的协同过滤方法"></a>基于用户的协同过滤方法</h2><p>我们可以根据某用户的兴趣来找到和该用户“相似”的用户，然后再根据这些相似用户的兴趣来推荐感兴趣的东西。</p><p>如何定义相似用户？在这里用<strong>余弦相似度</strong>作为两个用户之间相似程度的指标，并对用户爱好进行 one-hot 编码处理。 “爱好相似的用户”就意味着“兴趣向量的方向几乎相同的用户”。</p><p>首先整理出一个不重复的兴趣列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">unique_interests = sorted(list(&#123;interest <span class="keyword">for</span> user_interests <span class="keyword">in</span> users_interests <span class="keyword">for</span> interest <span class="keyword">in</span> user_interests &#125;))</span><br><span class="line"></span><br><span class="line">unique_interests</span><br><span class="line"><span class="comment">## output:</span></span><br><span class="line"><span class="comment"># ['Big Data',</span></span><br><span class="line"><span class="comment">#  'C++',</span></span><br><span class="line"><span class="comment">#  'Cassandra',</span></span><br><span class="line"><span class="comment">#  'HBase',</span></span><br><span class="line"><span class="comment">#  'Hadoop',</span></span><br><span class="line"><span class="comment">#  'Haskell',</span></span><br></pre></td></tr></table></figure><p>然后根据这个兴趣列表对每个用户进行 one-hot 编码处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_user_interest_vector</span><span class="params">(user_interests)</span>:</span></span><br><span class="line">    user_interest_one_hot = []</span><br><span class="line">    <span class="keyword">for</span> interest <span class="keyword">in</span> unique_interests:</span><br><span class="line">        <span class="keyword">if</span> interest <span class="keyword">in</span> user_interests:</span><br><span class="line">            user_interest_one_hot.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user_interest_one_hot.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> user_interest_one_hot</span><br><span class="line"></span><br><span class="line">user_interest_matrix = []</span><br><span class="line"><span class="keyword">for</span> user_interests <span class="keyword">in</span> users_interests:</span><br><span class="line">    user_interest_matrix.append(make_user_interest_vector(user_interests))</span><br></pre></td></tr></table></figure><p>这样我们有了用户兴趣矩阵 user_interest_matrix。接下来用余弦相似度来计算用户之间的相似度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics.pairwise <span class="keyword">import</span> cosine_similarity</span><br><span class="line"></span><br><span class="line">user_similarities = []</span><br><span class="line">user_similarities_temp = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> user_interest_matrix:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> user_interest_matrix:</span><br><span class="line">        user_similarities_j.append(cosine_similarity([i,j])[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">    user_similarities.append(user_similarities_temp)</span><br><span class="line">    user_similarities_temp = []</span><br></pre></td></tr></table></figure><p>user_similarities[i][j] 的数值即为用户 i 和用户 j 之间的相似度。user_similarities[i] 里存放的是用户 i 相对于所有用户的相似度数据。接下来以 user_similarities[i] 为输入参数来给出和用户 i 相似度最高的用户们：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">most_similar_users_to</span><span class="params">(user_id)</span>:</span></span><br><span class="line">    pairs = []</span><br><span class="line">    <span class="keyword">for</span> other_user_id, similarity <span class="keyword">in</span> enumerate(user_similarities[user_id]):</span><br><span class="line">        <span class="keyword">if</span> user_id != other_user_id <span class="keyword">and</span> similarity &gt; <span class="number">0</span>:</span><br><span class="line">            pairs.append((other_user_id, similarity))</span><br><span class="line">    </span><br><span class="line">    pairs.sort(key = <span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> pairs</span><br><span class="line"></span><br><span class="line">most_similar_users_to(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># [(9, 0.5669467095138407),</span></span><br><span class="line"><span class="comment">#  (1, 0.3380617018914066),</span></span><br><span class="line"><span class="comment">#  (8, 0.1889822365046136),</span></span><br><span class="line"><span class="comment">#  (13, 0.1690308509457033),</span></span><br><span class="line"><span class="comment">#  (5, 0.1543033499620919)]</span></span><br></pre></td></tr></table></figure><p>得到了最相似的用户群后，我们可以将用户群里用户的兴趣相似度向加起来，排序后得到最终结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_based_suggestions</span><span class="params">(user_id, include_current_interests=False)</span>:</span></span><br><span class="line">    suggestions = defaultdict(float) </span><br><span class="line">    <span class="keyword">for</span> other_user_id, similarity <span class="keyword">in</span> most_similar_users_to(user_id): </span><br><span class="line">        <span class="keyword">for</span> interest <span class="keyword">in</span> users_interests[other_user_id]: </span><br><span class="line">            suggestions[interest] += similarity </span><br><span class="line">    </span><br><span class="line">    suggestions = sorted(suggestions.items(), </span><br><span class="line">                         key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], </span><br><span class="line">                         reverse=<span class="literal">True</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> include_current_interests: </span><br><span class="line">        <span class="keyword">return</span> suggestions </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">return</span> [(suggestion, weight) </span><br><span class="line">                <span class="keyword">for</span> suggestion, weight <span class="keyword">in</span> suggestions </span><br><span class="line">                <span class="keyword">if</span> suggestion <span class="keyword">not</span> <span class="keyword">in</span> users_interests[user_id]]</span><br><span class="line"></span><br><span class="line"> user_based_suggestions(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#  output:</span></span><br><span class="line"><span class="comment">#  [('MapReduce', 0.5669467095138407),</span></span><br><span class="line"><span class="comment">#  ('MongoDB', 0.50709255283711),</span></span><br><span class="line"><span class="comment">#  ('Postgres', 0.50709255283711),</span></span><br><span class="line"><span class="comment">#  ('NoSQL', 0.3380617018914066),</span></span><br><span class="line"><span class="comment">#  ('neural networks', 0.1889822365046136),</span></span><br><span class="line"><span class="comment">#  ('deep learning', 0.1889822365046136),</span></span><br><span class="line"><span class="comment">#  ('artificial intelligence', 0.1889822365046136),</span></span><br><span class="line"><span class="comment">#  ('databases', 0.1690308509457033),</span></span><br><span class="line"><span class="comment">#  ('MySQL', 0.1690308509457033),</span></span><br><span class="line"><span class="comment">#  ('Python', 0.1543033499620919),</span></span><br><span class="line"><span class="comment">#  ('R', 0.1543033499620919),</span></span><br><span class="line"><span class="comment">#  ('C++', 0.1543033499620919),</span></span><br><span class="line"><span class="comment">#  ('Haskell', 0.1543033499620919),</span></span><br><span class="line"><span class="comment">#  ('programming languages', 0.1543033499620919)]</span></span><br></pre></td></tr></table></figure><p>从 users_interests 里可以看出用户 0 对大数据很感兴趣，这与上面的代码预测结果一致。</p><p>在实际情况中，兴趣的数量会非常大。这意味着用户兴趣矩阵 user_interest_matrix 会是一个非常稀疏的矩阵，这会非常影响后面预测的效果。</p><h2 id="基于物品的协同过滤算法"><a href="#基于物品的协同过滤算法" class="headerlink" title="基于物品的协同过滤算法"></a>基于物品的协同过滤算法</h2><p>换一种思路，直接计算两种兴趣的相似度，然后推荐与用户当前兴趣相似度高的东西。</p><p>首先对用户兴趣矩阵转置，使行对应于兴趣，列对应用户：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interest_user_matrix = np.array(user_interest_matrix).T.tolist()</span><br></pre></td></tr></table></figure><p>unique_interests[0] 为 Big Data:<br>[1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], 这一行的意思是用户 0， 8， 9 对 Big Data 感兴趣。</p><p>接下来再此使用余弦相似度得到兴趣矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interest_similarities = []</span><br><span class="line">interest_similarities_temp = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> interest_user_matrix:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> interest_user_matrix:</span><br><span class="line">        interest_similarities_temp.append(cosine_similarity([i,j])[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">    interest_similarities.append(interest_similarities_temp)</span><br><span class="line">    interest_similarities_temp = []</span><br></pre></td></tr></table></figure><p>用下面的函数定义与 Big Data 最相似的项：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">most_similar_interests_to</span><span class="params">(interest_id)</span>:</span> </span><br><span class="line">    similarities = interest_similarities[interest_id] </span><br><span class="line">    pairs = [(unique_interests[other_interest_id], similarity) </span><br><span class="line">             <span class="keyword">for</span> other_interest_id, similarity <span class="keyword">in</span> enumerate(similarities) </span><br><span class="line">             <span class="keyword">if</span> interest_id != other_interest_id <span class="keyword">and</span> similarity &gt; <span class="number">0</span>] </span><br><span class="line">    <span class="keyword">return</span> sorted(pairs, </span><br><span class="line">                  key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], </span><br><span class="line">                  reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>运行 most_similar_interests_to(0) 的到的输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[(&#39;Hadoop&#39;, 0.816496580927726),</span><br><span class="line"> (&#39;Java&#39;, 0.6666666666666669),</span><br><span class="line"> (&#39;MapReduce&#39;, 0.5773502691896258),</span><br><span class="line"> (&#39;Spark&#39;, 0.5773502691896258),</span><br><span class="line"> (&#39;Storm&#39;, 0.5773502691896258),</span><br><span class="line"> (&#39;Cassandra&#39;, 0.408248290463863),</span><br><span class="line"> (&#39;artificial intelligence&#39;, 0.408248290463863),</span><br><span class="line"> (&#39;deep learning&#39;, 0.408248290463863),</span><br><span class="line"> (&#39;neural networks&#39;, 0.408248290463863),</span><br><span class="line"> (&#39;HBase&#39;, 0.3333333333333334)]</span><br></pre></td></tr></table></figure><p>最后根据用户的兴趣总结与其兴趣相似的东西进行推荐:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">item_based_suggestions</span><span class="params">(user_id, include_current_interests=False)</span>:</span> </span><br><span class="line"></span><br><span class="line">    suggestions = defaultdict(float) </span><br><span class="line">    user_interest_vector = user_interest_matrix[user_id] </span><br><span class="line">    <span class="keyword">for</span> interest_id, is_interested <span class="keyword">in</span> enumerate(user_interest_vector): </span><br><span class="line">        <span class="keyword">if</span> is_interested == <span class="number">1</span>: </span><br><span class="line">            similar_interests = most_similar_interests_to(interest_id) </span><br><span class="line">            <span class="keyword">for</span> interest, similarity <span class="keyword">in</span> similar_interests: </span><br><span class="line">                suggestions[interest] += similarity </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    suggestions = sorted(suggestions.items(), </span><br><span class="line">                         key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], </span><br><span class="line">                         reverse=<span class="literal">True</span>) </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> include_current_interests: </span><br><span class="line">        <span class="keyword">return</span> suggestions </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">return</span> [(suggestion, weight) </span><br><span class="line">                <span class="keyword">for</span> suggestion, weight <span class="keyword">in</span> suggestions </span><br><span class="line">                <span class="keyword">if</span> suggestion <span class="keyword">not</span> <span class="keyword">in</span> users_interests[user_id]]</span><br></pre></td></tr></table></figure><p>运行 item_based_suggestions(0) 得到如下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[(&#39;MapReduce&#39;, 1.861807319565799),</span><br><span class="line"> (&#39;MongoDB&#39;, 1.3164965809277258),</span><br><span class="line"> (&#39;Postgres&#39;, 1.3164965809277258),</span><br><span class="line"> (&#39;NoSQL&#39;, 1.2844570503761732),</span><br><span class="line"> (&#39;MySQL&#39;, 0.5773502691896258),</span><br><span class="line"> (&#39;databases&#39;, 0.5773502691896258),</span><br><span class="line"> (&#39;Haskell&#39;, 0.5773502691896258),</span><br><span class="line"> (&#39;programming languages&#39;, 0.5773502691896258),</span><br><span class="line"> (&#39;artificial intelligence&#39;, 0.408248290463863),</span><br><span class="line"> (&#39;deep learning&#39;, 0.408248290463863),</span><br><span class="line"> (&#39;neural networks&#39;, 0.408248290463863),</span><br><span class="line"> (&#39;C++&#39;, 0.408248290463863),</span><br><span class="line"> (&#39;Python&#39;, 0.2886751345948129),</span><br><span class="line"> (&#39;R&#39;, 0.2886751345948129)]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;日常生活中经常能看到利用被收集到的数据来提供建议或者推荐产品的例子。比如在京东购买了关于 Hadoop 的书，JD App 就会看到 Spark 相关的书排在很靠前的位置。本文将尝试用 Python 来实现一个简单的推荐算法模型。&lt;/p&gt;
&lt;p&gt;假设我们有如下用户数据：&lt;/p&gt;</summary>
    
    
    
    <category term="Machine Learning" scheme="https://absinthes2049.github.io/categories/Machine-Learning/"/>
    
    
    <category term="Machine Learning" scheme="https://absinthes2049.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>泛化，过拟合和欠拟合</title>
    <link href="https://absinthes2049.github.io/ea5305b3/"/>
    <id>https://absinthes2049.github.io/ea5305b3/</id>
    <published>2021-07-08T14:43:37.000Z</published>
    <updated>2021-07-09T00:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>假设我们有如下数据：</p><table><thead><tr><th align="right"></th><th align="right">年龄</th><th align="right">拥有的汽车数量</th><th align="left">是否有房子</th><th align="right">子女数量</th><th align="left">婚姻状况</th><th align="left">是否养狗</th><th align="left">是否买过船</th></tr></thead><tbody><tr><td align="right">0</td><td align="right">66</td><td align="right">1</td><td align="left">是</td><td align="right">2</td><td align="left">丧偶</td><td align="left">否</td><td align="left">是</td></tr><tr><td align="right">1</td><td align="right">52</td><td align="right">2</td><td align="left">是</td><td align="right">3</td><td align="left">已婚</td><td align="left">否</td><td align="left">是</td></tr><tr><td align="right">2</td><td align="right">22</td><td align="right">0</td><td align="left">否</td><td align="right">0</td><td align="left">已婚</td><td align="left">是</td><td align="left">否</td></tr><tr><td align="right">3</td><td align="right">25</td><td align="right">1</td><td align="left">否</td><td align="right">1</td><td align="left">单身</td><td align="left">否</td><td align="left">否</td></tr><tr><td align="right">4</td><td align="right">44</td><td align="right">0</td><td align="left">否</td><td align="right">2</td><td align="left">离异</td><td align="left">是</td><td align="left">否</td></tr><tr><td align="right"><a id="more"></a></td><td align="right"></td><td align="right"></td><td align="left"></td><td align="right"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="right">5</td><td align="right">39</td><td align="right">1</td><td align="left">是</td><td align="right">2</td><td align="left">已婚</td><td align="left">是</td><td align="left">否</td></tr><tr><td align="right">6</td><td align="right">26</td><td align="right">1</td><td align="left">否</td><td align="right">2</td><td align="left">单身</td><td align="left">否</td><td align="left">否</td></tr><tr><td align="right">7</td><td align="right">40</td><td align="right">3</td><td align="left">是</td><td align="right">1</td><td align="left">已婚</td><td align="left">是</td><td align="left">否</td></tr><tr><td align="right">8</td><td align="right">53</td><td align="right">2</td><td align="left">是</td><td align="right">2</td><td align="left">离异</td><td align="left">否</td><td align="left">是</td></tr><tr><td align="right">9</td><td align="right">64</td><td align="right">2</td><td align="left">是</td><td align="right">3</td><td align="left">离异</td><td align="left">否</td><td align="left">否</td></tr><tr><td align="right">10</td><td align="right">58</td><td align="right">2</td><td align="left">是</td><td align="right">2</td><td align="left">已婚</td><td align="left">是</td><td align="left">是</td></tr><tr><td align="right">11</td><td align="right">33</td><td align="right">1</td><td align="left">否</td><td align="right">1</td><td align="left">单身</td><td align="left">否</td><td align="left">否</td></tr></tbody></table><p>我们的目的是根据上面船只的购买记录以及对买船不感兴趣的顾客记录，来预测某个记录是否买船。</p><p>对数据观察一段时间后，我们可以发现如下规律：“如果果顾客年龄大于<br>45 岁，并且子女少于 3 个或没有离婚，那么他就想要买船。” 对于表中的数据，该规律完全正确。但我们的目的并不是对这个数据集进行预测，而是想知道新顾客是否可能会买船，因次在训练集上实现 100% 的精度对此完全没有帮助。</p><p>判断一个算法在新数据上表现好坏的唯一度量，就是在测试集上的评估。构建一个对于现信息量过于复杂的模型，就像上面所述的规律一样，被称为过拟合（overfitting）。过拟合的模型过分关注训练集的细节，在训练集上表现很好但并不能很好地解释新数据。如果一个模型能够对没见过的数据做出准确预测，我们就说它能够从训练集泛化（generalize）到测试集。</p><p>与上述相反，如果我们的模型过于简单（“有房子的人都买船”），模型无法提取出数据中的大部分信息以致在训练集上的表现就很差，这就被称为欠拟合（underfitting）。</p><p>模型的复杂度越高，在训练集上的预测结果越好。但是如果模型过于复杂则泛化能力会变得越来越差。总之，我们的目的是在过拟合和欠拟合中找到一个平衡点，来使模型的泛化性能达到最好，这是我们理想的模型。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;假设我们有如下数据：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;right&quot;&gt;&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;年龄&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;拥有的汽车数量&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;是否有房子&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;子女数量&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;婚姻状况&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;是否养狗&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;是否买过船&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;right&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;66&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;是&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;丧偶&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;否&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;52&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;是&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;已婚&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;否&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;right&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;22&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;否&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;已婚&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;是&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;right&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;25&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;否&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;单身&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;否&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;right&quot;&gt;4&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;44&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;否&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;离异&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;是&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="Machine Learning" scheme="https://absinthes2049.github.io/categories/Machine-Learning/"/>
    
    
    <category term="Machine Learning" scheme="https://absinthes2049.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>常用的 FFmpeg 命令</title>
    <link href="https://absinthes2049.github.io/9ed508cc/"/>
    <id>https://absinthes2049.github.io/9ed508cc/</id>
    <published>2021-03-25T02:19:18.000Z</published>
    <updated>2021-08-31T01:27:24.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>总结下经常用到的 <a href="https://www.ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a> 命令。</p><ol><li>webm/m4a to mp3<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.m4a&#x2F;.webm -acodec libmp3lame output.mp3</span><br></pre></td></tr></table></figure></li><li>ts to mp4<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.ts -vcodec copy -copyts -acodec copy -absf aac_adtstoasc output.mp4</span><br></pre></td></tr></table></figure></li><li>mp4 to avi<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.avi -vcodec mpeg4 -vtag xvid output.avi</span><br></pre></td></tr></table></figure><a id="more"></a></li><li>webm to mp4<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.webm -vcodec libx264 -crf 20 -acodec aac -strict experimental output.mp4</span><br><span class="line">(-crf 参数的取值范围为 0~51，其中 0 为无损模式，数值越大，画质越差，生成的文件越小)</span><br></pre></td></tr></table></figure></li><li>mts to mp4<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.m2ts -c:v copy -c:a aac -strict experimental -b:a 128k output.mp4</span><br></pre></td></tr></table></figure></li><li>音频淡入淡出效果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -y -i input.mp3 -af &quot;afade&#x3D;t&#x3D;in:ss&#x3D;0:d&#x3D;4,afade&#x3D;t&#x3D;out:st&#x3D;30:d&#x3D;4&quot; output.mp3</span><br></pre></td></tr></table></figure></li><li>视频淡入淡出效果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input -vf &quot;fade&#x3D;in:0:d&#x3D;[持续时间]:color&#x3D;[过度颜色];fade&#x3D;out:st:d&#x3D;[持续时间]:color&#x3D;[过度颜色]&quot; output</span><br></pre></td></tr></table></figure></li><li>视频截取<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -ss START -t DURATION -i INPUT -vcodec copy -acodec copy OUTPUT</span><br></pre></td></tr></table></figure></li><li>视频画面裁切（去黑边）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input -vf crop&#x3D;OW:OH:x:y output</span><br></pre></td></tr></table></figure></li><li>添加水印<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input1 -i input2 -filter_complex overlay&#x3D;x:y output</span><br></pre></td></tr></table></figure></li><li>delogo<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input -vf delogo&#x3D;x&#x3D;0:y&#x3D;0:w&#x3D;width:h&#x3D;height:enable&#x3D;&#39;between(t,starttime,endtime)&#39; output</span><br></pre></td></tr></table></figure></li><li>设置字幕标题、默认字幕流<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i INPUT -c:v copy -c:a copy -c:s copy -metadata:s:s:0 title&#x3D;中文 -metadata:s:s:0 language&#x3D;chi -disposition:s:0 default OUTPUT</span><br></pre></td></tr></table></figure></li><li>批量转码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for &#x2F;R %v IN (*.avi) do ( ffmpeg -i %v -acodec aac -vcodec libx265  &quot;OUTPUT\%~nv.mkv&quot;)（cmd）</span><br><span class="line">for &#x2F;R %%v IN (*.avi) do ( ffmpeg -i %%v -acodec aac -vcodec libx265  &quot;OUTPUT\%%~nv.mkv&quot;)（script）</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;总结下经常用到的 &lt;a href=&quot;https://www.ffmpeg.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FFmpeg&lt;/a&gt; 命令。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;webm/m4a to mp3&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ffmpeg -i input.m4a&amp;#x2F;.webm -acodec libmp3lame output.mp3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;ts to mp4&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ffmpeg -i input.ts -vcodec copy -copyts -acodec copy -absf aac_adtstoasc output.mp4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;mp4 to avi&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ffmpeg -i input.avi -vcodec mpeg4 -vtag xvid output.avi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="FFmpeg" scheme="https://absinthes2049.github.io/categories/FFmpeg/"/>
    
    
    <category term="FFmpeg" scheme="https://absinthes2049.github.io/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>Python数据结构与算法补全系列(五)--图</title>
    <link href="https://absinthes2049.github.io/7c1ea0e4/"/>
    <id>https://absinthes2049.github.io/7c1ea0e4/</id>
    <published>2021-03-25T02:07:01.000Z</published>
    <updated>2021-08-31T01:27:46.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="图的术语和定义"><a href="#图的术语和定义" class="headerlink" title="图的术语和定义"></a>图的术语和定义</h3><h4 id="顶点"><a href="#顶点" class="headerlink" title="顶点"></a>顶点</h4><p>顶点又称节点，是图的基础部分。顶点的名字被称为“键”。顶点也可以带有附加信息，我称作“有效载荷”。</p><h4 id="边"><a href="#边" class="headerlink" title="边"></a>边</h4><p>边是图的另一个基础部分。两个顶点通过一条边相连，表示它们之间存在关系。边既可以是单向的，也可以是双向的。如果图中的所有边都是单向的，我们称之为有向图。</p><a id="more"></a><h4 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h4><p>边可以带权重，用来表示从一个顶点到另一个顶点的成本。例如在路线图中，从一个城市到另一个城市，边的权重可以表示两个城市之间的距离。 </p><h4 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h4><p>图可以用 G 来表示，并且 $G = (V, E)$。其中，V 是一个顶点集合，E 是一个边集合。每一条边是一个二元组(v, w)，其中 $w, v \in V$ 。可以向边的二元组中再添加一个元素，用于表示权重。子图 s 是一个由边 e 和顶点 v 构成的集合，其中 $e \subset E$ 且 $v \subset V$。</p><h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><p>路径是由边连接的顶点组成的序列。路径的正式定义为$w_1, w_2,…,w_n$, 其中对于所有的$1\leq i \leq n-1$, 有 $(w_1, w_{i+1}) \in E$。 无权重路径的长度是路径上的边数，有权重路径的长度是路径的边的权重之和。</p><h4 id="环"><a href="#环" class="headerlink" title="环"></a>环</h4><p>环是有向图中的一条起点和终点为同一个顶点的路径。没有环的图被称为<strong>无环图</strong>，没有环的有向图被称为<strong>有向无环图</strong>，简称为 <strong>DAG</strong>。</p><h3 id="图的数据抽象类型"><a href="#图的数据抽象类型" class="headerlink" title="图的数据抽象类型"></a>图的数据抽象类型</h3><p>有两种非常著名的图实现：邻接矩阵和邻接表。</p><h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><p>实现图最简单的方式就是使用二维矩阵。在矩阵实现中，每一行和每一列都表示图中的一个顶点。第 v 行和第 w 列交叉的格子中的值表示从顶点 v 到顶点 w 的边的权重。如果两个顶点被一条边连接起来，就称它们是相邻的。</p><p>邻接矩阵的优点是简单。对于小图来说，邻接矩阵可以清晰地展示哪些顶点是相连的。如果一个邻接矩阵的绝大多数单元格是空的，这种矩阵是“稀疏”的。对于存储稀疏数据来说，矩阵并不高效。</p><h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h4><p>为了实现稀疏连接的图，更高效的方式是使用邻接表。在邻接表实现中，我们为图对象的所有顶点保存一个主列表，同时为每一个顶点对象都维护一个列表，其中记录了与它相连的顶点。</p><p>在 Python 中，通过字典可以轻松地实现邻接表。创建两个类：： Graph 类存储包含所有顶点的主列表， Vertex 类表示图中的每一个顶点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Vertrx 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vertex</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        self.id = key</span><br><span class="line">        self.connected_to = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_neighbor</span><span class="params">(self, nbr, weight=<span class="number">0</span>)</span>:</span></span><br><span class="line">        self.connected_to[nbr] = weight</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self.id) + <span class="string">' conneted to: '</span> + str([x.id <span class="keyword">for</span> x <span class="keyword">in</span> self.connected_to])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_connections</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.connected_to.keys()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_id</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_weight</span><span class="params">(self, nbr)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.connected_to[nbr]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.ver_list = &#123;&#125;</span><br><span class="line">        self.num_vertices = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_vertex</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        self.num_vertices = self.num_vertices + <span class="number">1</span></span><br><span class="line">        new_vertex = Vertex(key)</span><br><span class="line">        self.ver_list[key] = new_vertex</span><br><span class="line">        <span class="keyword">return</span> new_vertex</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_vertex</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">in</span> self.ver_list:</span><br><span class="line">            <span class="keyword">return</span> self.ver_list[n]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> n <span class="keyword">in</span> self.ver_list</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge</span><span class="params">(self, f, t, cost=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> f <span class="keyword">not</span> <span class="keyword">in</span> self.ver_list:</span><br><span class="line">            nv = self.add_vertex(f)</span><br><span class="line">        <span class="keyword">if</span> t <span class="keyword">not</span> <span class="keyword">in</span> self.ver_list:</span><br><span class="line">            nv = self.add_vertex(t)</span><br><span class="line">        self.ver_list[f].add_neighbor(self.ver_list[t], cost)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_vertices</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.ver_list.keys()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> iter(self.ver_list.values())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = Graph()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>): </span><br><span class="line"><span class="meta">... </span>   g.addVertex(i)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.vertList</span><br><span class="line">&#123;<span class="number">0</span>: &lt;__main__.Vertex at <span class="number">0x20181075b20</span>&gt;,</span><br><span class="line"> <span class="number">1</span>: &lt;__main__.Vertex at <span class="number">0x20181075ac0</span>&gt;,</span><br><span class="line"> <span class="number">2</span>: &lt;__main__.Vertex at <span class="number">0x20181075f40</span>&gt;,</span><br><span class="line"> <span class="number">3</span>: &lt;__main__.Vertex at <span class="number">0x20181075ee0</span>&gt;,</span><br><span class="line"> <span class="number">4</span>: &lt;__main__.Vertex at <span class="number">0x20181075df0</span>&gt;,</span><br><span class="line"> <span class="number">5</span>: &lt;__main__.Vertex at <span class="number">0x20181075e80</span>&gt;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.addEdge(<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.addEdge(<span class="number">0</span>, <span class="number">5</span>, <span class="number">2</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.addEdge(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.addEdge(<span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.addEdge(<span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.addEdge(<span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.addEdge(<span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.addEdge(<span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.addEdge(<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> v <span class="keyword">in</span> g: </span><br><span class="line"><span class="meta">... </span>   <span class="keyword">for</span> w <span class="keyword">in</span> v.getConnections(): </span><br><span class="line"><span class="meta">... </span>       print(<span class="string">f'(<span class="subst">&#123;v.get_id()&#125;</span> ,<span class="subst">&#123;w.get_id()&#125;</span>)'</span>)</span><br><span class="line">...</span><br><span class="line">(<span class="number">0</span> ,<span class="number">1</span>)</span><br><span class="line">(<span class="number">0</span> ,<span class="number">5</span>)</span><br><span class="line">(<span class="number">1</span> ,<span class="number">2</span>)</span><br><span class="line">(<span class="number">2</span> ,<span class="number">3</span>)</span><br><span class="line">(<span class="number">3</span> ,<span class="number">4</span>)</span><br><span class="line">(<span class="number">3</span> ,<span class="number">5</span>)</span><br><span class="line">(<span class="number">4</span> ,<span class="number">0</span>)</span><br><span class="line">(<span class="number">5</span> ,<span class="number">4</span>)</span><br><span class="line">(<span class="number">5</span> ,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="宽度优先搜索"><a href="#宽度优先搜索" class="headerlink" title="宽度优先搜索"></a>宽度优先搜索</h3><p>考虑这样一个任务：将单词 FOOL 转换成 SAGE。在解决词梯问题时，必须每次只替换一个字母，并且每一步的结果都必须是一个单词，而不能是不存在的词。假设单词表中有 n 个单词，将一个单词与列表中其他所有单词进行比较，时间复杂度为 $O(n^2)$。用图算法来解决这个问题，大致步骤为：</p><ol><li>用图表示单词之间的关系</li><li>用宽度优先搜索的图算法找到从起始单词到结束单词的最短路径</li></ol><p>单词集合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FOOL</span><br><span class="line">POOL</span><br><span class="line">FOIL</span><br><span class="line">FOUL</span><br><span class="line">COOL</span><br><span class="line">POLL</span><br><span class="line">FAIL</span><br><span class="line">POLE</span><br><span class="line">PALL</span><br><span class="line">POPE</span><br><span class="line">PALE</span><br><span class="line">PAGE</span><br><span class="line">SALE</span><br><span class="line">SAGE</span><br></pre></td></tr></table></figure><p>假设有数目巨大的桶，每个个桶上都标有一个长度为 4 的单词，但是某一个字母被下划线代替，如 POP_。当处理列表中的每一个单词时，将它与桶上的标签进行比较。使用下划线作为通配符，我们将 POPE 和 POPS 放入同一个桶中。同一个桶中的单词一定是相连的。 </p><p>在 Python 中，可以通过字典来实现上述方法。字典的键就是桶上的标签，值就是对应的单词列表。一旦构建好字典，就能利用它来创建图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pythonds.graphs <span class="keyword">import</span> Graph</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_graph</span><span class="params">(word_file)</span>:</span></span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    g = Graph()</span><br><span class="line">    wfile = open(word_file,<span class="string">'r'</span>)</span><br><span class="line">    <span class="comment"># 创建词桶  </span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> wfile:</span><br><span class="line">        word = line[:<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(word)):</span><br><span class="line">            bucket = word[:i] + <span class="string">'_'</span> + word[i+<span class="number">1</span>:]</span><br><span class="line">            <span class="keyword">if</span> bucket <span class="keyword">in</span> d:</span><br><span class="line">                d[bucket].append(word)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d[bucket] = [word]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 为同一个桶中的单词添加顶点和边 </span></span><br><span class="line">    <span class="keyword">for</span> bucket <span class="keyword">in</span> d.keys():</span><br><span class="line">        <span class="keyword">for</span> word1 <span class="keyword">in</span> d[bucket]:</span><br><span class="line">            <span class="keyword">for</span> word2 <span class="keyword">in</span> d[bucket]:</span><br><span class="line">                <span class="keyword">if</span> word1 != word2:</span><br><span class="line">                    g.addEdge(word1, word2)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure><p><strong>宽度优先搜索(BFS)</strong>是最简单的图搜索算法之一，也是许多其他重要图算法的原型。 给定图 G 和起点 s，BFS 通过边来访问在 G 中与 s 之间存在路径的顶点。BFS 的一个重要特性是，它会在访问完所有与 s 相距为 k 的顶点之后再去访问与 s 相距为 k+1 的顶点。</p><p>为了记录进度，BFS 会将顶点标记成白色、灰色或黑色。在构建时，所有顶点都被初始化成白色。白色代表该顶点没有被访问过。当顶点第一次被访问时，它就会被标记为灰色；当 BFS完成对该顶点的访问之后，它就会被标记为黑色。这意味着一旦顶点变为黑色，就没有白色顶点与之相连。灰色顶点仍然可能与一些白色顶点相连，这意味着还有额外的顶点可以访问。</p><p>BFS 在访问一个新的顶点时，如果是白色，说明顶点没有被访问过，接下来执行以下四步：</p><ol><li>将新的未访问顶点 nbr 标记成灰色</li><li>将 nbr 的 predecessor 设置成当前顶点 currentVert</li><li>将 nbr 的 distance 设置成到 currentVert 的 distance 加 1</li><li>将 nbr 添加到队列的尾部</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 宽度优先搜索</span></span><br><span class="line"><span class="keyword">from</span> pythonds.graphs <span class="keyword">import</span> Graph, Vertex</span><br><span class="line"><span class="keyword">from</span> pythonds.basic <span class="keyword">import</span> Queue</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(g, start)</span>:</span></span><br><span class="line">    start.setDistance(<span class="number">0</span>)</span><br><span class="line">    start.setPred(<span class="literal">None</span>)</span><br><span class="line">    vert_queue = Queue()</span><br><span class="line">    vert_queue.enqueue(start)</span><br><span class="line">    <span class="keyword">while</span> (vert_queue.size() &gt; <span class="number">0</span>):</span><br><span class="line">        current_vert = vert_queue.dequeue()</span><br><span class="line">        <span class="keyword">for</span> nbr <span class="keyword">in</span> current_vert.getConnections():</span><br><span class="line">            <span class="keyword">if</span> (nbr.getColor() == <span class="string">'white'</span>):</span><br><span class="line">                nbr.setColor(<span class="string">'gray'</span>)</span><br><span class="line">                nbr.setDistance(current_vert.getDidtance() + <span class="number">1</span>)</span><br><span class="line">                nbr.set_pred(current_vert)</span><br><span class="line">                vert_queue.enqueue(nbr)</span><br><span class="line">        current_vert.setColor(<span class="string">'black'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">traverse</span><span class="params">(y)</span>:</span></span><br><span class="line">    x = y</span><br><span class="line">    <span class="keyword">while</span> (x.getPred()):</span><br><span class="line">        print(x.getId())</span><br><span class="line">        x = x.getPred()</span><br><span class="line">    print(x.getId())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = build_graph(<span class="string">'word_file.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bfs(g, g.getVertex(<span class="string">'FOOL'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>traverse(g.getVertex(<span class="string">'SAGE'</span>))</span><br><span class="line">SAGE</span><br><span class="line">SALE</span><br><span class="line">PALE</span><br><span class="line">PALL</span><br><span class="line">POLL</span><br><span class="line">POOL</span><br><span class="line">FOOL</span><br></pre></td></tr></table></figure><h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><p>马踏棋盘问题（也成为骑士周游问题）：将吗随机放在国际象棋的 8*8 的棋盘中的某个格子里，马按照走棋规则进行移动。要求每个方格只进入一次，走遍 64 个方格。</p><p>图搜索算法是解决马踏棋盘问题的算法中最易理解也最易编程的一种。通过两个步骤解决这个问题：</p><ol><li>用图表示骑士在棋盘上的合理走法</li><li>使用图算法找到一条长度为 $rows \times columns - 1$, 满足图中的每一个顶点都只被访问一次。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pythonds.graphs <span class="keyword">import</span> Graph</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kinghtGraph</span><span class="params">(bd_size)</span>:</span></span><br><span class="line">    ktGraph = Graph()</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(bd_size):</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(bd_size):</span><br><span class="line">            node_id = pos_to_node_id(row, col, bd_size)</span><br><span class="line">            new_positions = get_legal_moves(row, col, bd_size)</span><br><span class="line">            <span class="keyword">for</span> e <span class="keyword">in</span> new_positions:</span><br><span class="line">                nid = pos_to_node_id(e[<span class="number">0</span>], e[<span class="number">1</span>], bd_size)</span><br><span class="line">                ktGraph.addEdge(node_id, nid)</span><br><span class="line">    <span class="keyword">return</span> ktGraph</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_legal_moves</span><span class="params">(x, y ,bd_size)</span>:</span></span><br><span class="line">    new_moves = []</span><br><span class="line">    move_off_sets = [(<span class="number">-1</span>, <span class="number">-2</span>), (<span class="number">-1</span>, <span class="number">2</span>), (<span class="number">-2</span>, <span class="number">-1</span>), (<span class="number">-2</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">-2</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">-1</span>), (<span class="number">2</span>, <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> move_off_sets:</span><br><span class="line">        new_x = x + i[<span class="number">0</span>]</span><br><span class="line">        new_y = y + i[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> legal_coord(new_x, bd_size) <span class="keyword">and</span> legal_coord(new_y, bd_size):</span><br><span class="line">            new_moves.append((new_x, new_y))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_moves</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">legal_coord</span><span class="params">(x, bd_size)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">and</span> x &lt; bd_size:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pos_to_node_id</span><span class="params">(row, col, bd_size)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> row * bd_size + col</span><br></pre></td></tr></table></figure><p>用来解决骑士周游问题的搜索算法是<strong>深度优先搜索（DFS）</strong>。DFS 通过尽可能深地探索分支来构建树。 这个例子中，DFS 的目的是找到 63 条边构成的路径，当 DFS 遇到死路时，它会回退到树种倒数第 2 深的顶点，以继续移动。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pythonds.graphs <span class="keyword">import</span> Graph, Vertex</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">knightTour</span><span class="params">(n,path,u,limit)</span>:</span></span><br><span class="line">        u.setColor(<span class="string">'gray'</span>)</span><br><span class="line">        path.append(u)</span><br><span class="line">        <span class="keyword">if</span> n &lt; limit:</span><br><span class="line">            nbrList = list(u.getConnections())</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            done = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; len(nbrList) <span class="keyword">and</span> <span class="keyword">not</span> done:</span><br><span class="line">                <span class="keyword">if</span> nbrList[i].getColor() == <span class="string">'white'</span>:</span><br><span class="line">                    done = knightTour(n+<span class="number">1</span>, path, nbrList[i], limit)</span><br><span class="line">                i = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> done:  <span class="comment"># 准备回溯</span></span><br><span class="line">                path.pop()</span><br><span class="line">                u.setColor(<span class="string">'white'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            done = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> done</span><br></pre></td></tr></table></figure><p>knightTour 递归函数接受 4 个参数： n 是搜索树的当前深度； path 是到当前为止访问过的顶点列表； u 是希望在图中访问的顶点； limit 是路径上的顶点总数。它首先检查基本情况。如果有一条包含 64 个顶点的路径，就从 knightTour 返回 True ，以表示找到了一次成功的周游。如果路径不够长，则通过选择一个新的访问顶点并对其递归调用 knightTour 来进行更深一层的探索。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">&gt;&gt;&gt; kg &#x3D; kinghtGraph(8)</span><br><span class="line">&gt;&gt;&gt; path &#x3D; []</span><br><span class="line">&gt;&gt;&gt; v_5 &#x3D; kg.getVertex(4)</span><br><span class="line">&gt;&gt;&gt; knightTour(0, path, v_5, 63)</span><br></pre></td></tr></table></figure><p>性能一般的计算机，可能要等半个小时才能得到结果。用如下代码加速算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_by_avail</span><span class="params">(n)</span>:</span></span><br><span class="line">    res_list = []</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> n.getConnections():</span><br><span class="line">        <span class="keyword">if</span> v.getColor() == <span class="string">'white'</span>:</span><br><span class="line">            c = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> w <span class="keyword">in</span> v.getConnections():</span><br><span class="line">                <span class="keyword">if</span> w.getColor() == <span class="string">'white'</span>:</span><br><span class="line">                    c = c + <span class="number">1</span></span><br><span class="line">            res_list.append((c, v))</span><br><span class="line">    res_list.sort(key = <span class="keyword">lambda</span> x:x[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> [y[<span class="number">1</span>] <span class="keyword">for</span> y <span class="keyword">in</span> res_list]</span><br></pre></td></tr></table></figure><p>用 order_by_avail(u) 替换掉 knightTour 函数中第 4 行的 u.getConnections。 这一行保证接下来要访问的顶点有最少的合理走法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; kg &#x3D; kinghtGraph(8)</span><br><span class="line">&gt;&gt;&gt; path &#x3D; []</span><br><span class="line">&gt;&gt;&gt; v_5 &#x3D; kg.getVertex(4)</span><br><span class="line">&gt;&gt;&gt; knightTour(0, path, v_5, 63)</span><br><span class="line">&gt;&gt;&gt; for i in path:</span><br><span class="line">...     print(i.getId())</span><br><span class="line">...</span><br><span class="line">4</span><br><span class="line">14</span><br><span class="line">31</span><br><span class="line">46</span><br><span class="line">63</span><br><span class="line">53</span><br><span class="line">47</span><br><span class="line">62</span><br><span class="line">52</span><br><span class="line">58</span><br><span class="line">...</span><br><span class="line">42</span><br><span class="line">27</span><br><span class="line">17</span><br><span class="line">0</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>选择合理走法最多的顶点作为下一个访问顶点的问题在于，它会使骑士在周游的前期就访问位于棋盘中间的格子。当这种情况发生时，骑士很容易被困在棋盘的一边，而无法到达另一边的那些没访问过的格子。首先访问合理走法最少的顶点，则可使骑士优先访问棋盘边缘的格子。这样做保证了骑士能够尽早访问难以到达的角落，并且在需要的时候通过中间的格子跨越到棋盘的另一边。</p><p>我们称利用这类知识来加速算法为启发式技术。人类每天都在使用启发式技术做决定，启发式搜索也经常被用于人工智能领域。</p><p>马踏棋盘问题是深度优先搜索的一种特殊情况。通用的深度优先搜索简单一些，它的目标是尽可能深地搜索，尽可能多地连接图中的顶点，并且在需要的时候进行分支。</p><p>一次深度优先搜索甚至能够创建多棵深度优先搜索树，我们称之为深度优先森林。深度优先森林还会使用 Vertex 类中的两个额外的实例变量：发现时间记录算法在第一次访问顶点时的步数，结束时间记录算法在顶点被标记为黑色时的步数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pythonds.graphs <span class="keyword">import</span> Graph</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DFSGrahp</span><span class="params">(Graph)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.time = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> a_vertex <span class="keyword">in</span> self:</span><br><span class="line">            a_vertex.setColor(<span class="string">'white'</span>)</span><br><span class="line">            a_vertex.setPred(<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">for</span> a_vertex <span class="keyword">in</span> self:</span><br><span class="line">            <span class="keyword">if</span> a_vartex.getColor() == <span class="string">'white'</span>:</span><br><span class="line">                self.dfsvisit(a_vertex)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfsvisit</span><span class="params">(self, start_vertex)</span>:</span></span><br><span class="line">        start_vertex.setColor(<span class="string">'gray'</span>)</span><br><span class="line">        self.time += <span class="number">1</span></span><br><span class="line">        start_vertex.setDiscovery(self.time)</span><br><span class="line">        <span class="keyword">for</span> next_vertex <span class="keyword">in</span> start_vertex.getConnections():</span><br><span class="line">            <span class="keyword">if</span> next_vertex.getColor() == <span class="string">'white'</span>:</span><br><span class="line">                next_vertex.setPred(next_vertex)</span><br><span class="line">                self.dfsvisit(next_vertex)</span><br><span class="line">        start_vertex.setColor(<span class="string">'black'</span>)</span><br><span class="line">        self.time += <span class="number">1</span></span><br><span class="line">        start_vertex.setFinish(self.time)</span><br></pre></td></tr></table></figure><p>每个顶点的发现时间和结束时间都体现了括号特性，这意味着深度优先搜索树种的任一子节点都比该节点更晚的发现时间和更早的结束时间。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;图的术语和定义&quot;&gt;&lt;a href=&quot;#图的术语和定义&quot; class=&quot;headerlink&quot; title=&quot;图的术语和定义&quot;&gt;&lt;/a&gt;图的术语和定义&lt;/h3&gt;&lt;h4 id=&quot;顶点&quot;&gt;&lt;a href=&quot;#顶点&quot; class=&quot;headerlink&quot; title=&quot;顶点&quot;&gt;&lt;/a&gt;顶点&lt;/h4&gt;&lt;p&gt;顶点又称节点，是图的基础部分。顶点的名字被称为“键”。顶点也可以带有附加信息，我称作“有效载荷”。&lt;/p&gt;
&lt;h4 id=&quot;边&quot;&gt;&lt;a href=&quot;#边&quot; class=&quot;headerlink&quot; title=&quot;边&quot;&gt;&lt;/a&gt;边&lt;/h4&gt;&lt;p&gt;边是图的另一个基础部分。两个顶点通过一条边相连，表示它们之间存在关系。边既可以是单向的，也可以是双向的。如果图中的所有边都是单向的，我们称之为有向图。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://absinthes2049.github.io/categories/Python/"/>
    
    <category term="Data Science" scheme="https://absinthes2049.github.io/categories/Data-Science/"/>
    
    
    <category term="Algorithm" scheme="https://absinthes2049.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Python数据结构与算法补全系列(四)--树</title>
    <link href="https://absinthes2049.github.io/3dd4cabe/"/>
    <id>https://absinthes2049.github.io/3dd4cabe/</id>
    <published>2021-03-25T02:05:32.000Z</published>
    <updated>2021-08-31T01:27:48.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="树的术语和定义"><a href="#树的术语和定义" class="headerlink" title="树的术语和定义"></a>树的术语和定义</h3><h4 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h4><p>节点是树的基础部分。节点可以有自己的名字，被称作“键”，节点也可以有附带信息，被称为“有效载荷”。</p><h4 id="边"><a href="#边" class="headerlink" title="边"></a>边</h4><p>两个节点通过一条边相连，表示他们之间存在关系。除了根节点之外，其他每个节点仅有一条入边，出边则可能有多条。</p><a id="more"></a><h4 id="根节点"><a href="#根节点" class="headerlink" title="根节点"></a>根节点</h4><p>根节点是树中唯一没有入边的节点。</p><h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><p>路径是由边连接的有序节点列表。比如，哺乳纲-&gt;食肉目-&gt;猫科-&gt;猫属-&gt;家猫。</p><h4 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h4><p>一个节点通过出边与子节点相连。</p><h4 id="父节点"><a href="#父节点" class="headerlink" title="父节点"></a>父节点</h4><p>一个节点是所有其子节点的父节点。</p><h4 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h4><p>具有同一父节点的节点互称为兄弟节点。</p><h4 id="子树"><a href="#子树" class="headerlink" title="子树"></a>子树</h4><p>一个父节点及其所有后代的节点和边构成一颗子树</p><h4 id="叶子节点"><a href="#叶子节点" class="headerlink" title="叶子节点"></a>叶子节点</h4><p>叶子节点没有子节点。</p><h4 id="层数"><a href="#层数" class="headerlink" title="层数"></a>层数</h4><p>节点 n 的层数是从根节点到 n 的唯一长度路径。</p><h4 id="高度"><a href="#高度" class="headerlink" title="高度"></a>高度</h4><p>树的高度是其中节点层数的最大值。</p><h4 id="树的定义一"><a href="#树的定义一" class="headerlink" title="树的定义一"></a>树的定义一</h4><p>树有以下属性：</p><ul><li>有一个根节点</li><li>除根节点外，其他每个节点都与其唯一的父节点相连</li><li>从根节点到其他每个节点都有且仅有一条路径</li><li>如果每个节点最多有两个子节点，这样的树就被称为二叉树</li></ul><h4 id="树的定义二"><a href="#树的定义二" class="headerlink" title="树的定义二"></a>树的定义二</h4><p>一棵树要么为空，要么由一个根节点和零颗或多颗子树构成，子树本身也是一棵树。<br>每颗子树的根节点通过一条边连到父树的根节点。</p><h3 id="树的-Python-实现"><a href="#树的-Python-实现" class="headerlink" title="树的 Python 实现"></a>树的 Python 实现</h3><p>根据上面的定义，可以用以下的函数创建并操作二叉树。</p><ul><li>BinaryTree() 创建一个二叉树实例</li><li>getLeftChild() 返回当前节点的左子节点所对应的二叉树</li><li>getRightChild() 返回当前节点的右子节点所对应的二叉树</li><li>setRootVal(val) 在当前节点中存储参数 val 中的对象</li><li>getRootVal() 返回当前节点存储的对象</li><li>insertLeft(val) 新建一棵二叉树，并将其作为当前节点的左子节点</li><li>insertRight(val) 新建一棵二叉树，并将其作为当前节点的右子节点</li></ul><h4 id="树的实现形式之一：列表之列表"><a href="#树的实现形式之一：列表之列表" class="headerlink" title="树的实现形式之一：列表之列表"></a>树的实现形式之一：列表之列表</h4><p>在列表之列表的树中，根节点的值作为列表的第一个元素，第二个元素是代表左子树的列表，第三个元素代表右子树。</p><pre class="mermaid">graph TBa((a))b((b))c((c))d((d))e((e))f((f))a-->ba-->cb-->db-->ec-->f</pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">my_tree = [</span><br><span class="line">  <span class="string">'a'</span>: <span class="comment"># 根节点</span></span><br><span class="line">  [</span><br><span class="line">    <span class="string">'b'</span>: <span class="comment"># 左子树</span></span><br><span class="line">    [</span><br><span class="line">      <span class="string">'d'</span>, [] ,[]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      <span class="string">'e'</span>, [], []</span><br><span class="line">    ]</span><br><span class="line">    <span class="string">'c'</span>, <span class="comment"># 右子树</span></span><br><span class="line">    [</span><br><span class="line">      <span class="string">'f'</span>, [], []</span><br><span class="line">    ],</span><br><span class="line">    []</span><br><span class="line">  ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>可以通过标准的列表切片访问子树。子树的列表结构也符合树的定义，所以列表之列表的结构是递归地。这种表示法可以推广到有很多子树的情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; my_tree &#x3D; [&#39;a&#39;, [&#39;b&#39;, [&#39;d&#39;, [], []], [&#39;e&#39;, [], []]], [&#39;c&#39;, [&#39;f&#39;, [], []], []]]</span><br><span class="line">&gt;&gt;&gt; my_tree</span><br><span class="line">[&#39;a&#39;, [&#39;b&#39;, [&#39;d&#39;, [], []], [&#39;e&#39;, [], []]], [&#39;c&#39;, [&#39;f&#39;, [], []], []]]</span><br><span class="line">&gt;&gt;&gt; my_tree[1]</span><br><span class="line">[&#39;b&#39;, [&#39;d&#39;, [], []], [&#39;e&#39;, [], []]] </span><br><span class="line">&gt;&gt;&gt; my_tree[0]</span><br><span class="line">&#39;a&#39;</span><br><span class="line">&gt;&gt;&gt; my_tree[2]</span><br><span class="line">[&#39;c&#39;, [&#39;f&#39;, [], []], []]</span><br></pre></td></tr></table></figure><p>通过函数定义树的数据结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_tree</span><span class="params">(r)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [r, [], []]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 插入左子树</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_left</span><span class="params">(root, new_branch)</span>:</span></span><br><span class="line">    t = root.pop(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> len(t) &gt; <span class="number">1</span>:</span><br><span class="line">        root.insert(<span class="number">1</span>, [new_branch, t, []])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        root.insert(<span class="number">1</span>, [new_branch, [], []])</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"><span class="comment">## 插入右子树</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_right</span><span class="params">(root, new_branch)</span>:</span></span><br><span class="line">    t = root.pop(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> len(t) &gt; <span class="number">1</span>:</span><br><span class="line">        root.insert(<span class="number">2</span>, [new_branch,[], t])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        root.insert(<span class="number">2</span>, [new_branch, [], []])</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_root_val</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> root[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_root_val</span><span class="params">(root, new_val)</span>:</span></span><br><span class="line">    root[<span class="number">0</span>] = new_val</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_left_child</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> root[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_right_child</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> root[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>要给树添加左子树时要特别注意，如果列表的左子树位置已经有内容了，要保留已有内容，并将它作为新列表的左子树。右子树同理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = binary_tree(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>insert_left(r, <span class="number">4</span>)</span><br><span class="line">[<span class="number">3</span>, [<span class="number">4</span>, [], []], []]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>insert_left(r, <span class="number">5</span>)</span><br><span class="line">[<span class="number">3</span>, [<span class="number">5</span>, [<span class="number">4</span>, [], []], []], []]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>insert_right(r, <span class="number">6</span>)</span><br><span class="line">[<span class="number">3</span>, [<span class="number">5</span>, [<span class="number">4</span>, [], []], []], [<span class="number">6</span>, [], []]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>insert_right(r, <span class="number">7</span>)</span><br><span class="line">[<span class="number">3</span>, [<span class="number">5</span>, [<span class="number">4</span>, [], []], []], [<span class="number">7</span>, [], [<span class="number">6</span>, [], []]]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = get_left_child(r)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">5</span>, [<span class="number">4</span>, [], []], []]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set_root_val(l, <span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r</span><br><span class="line">[<span class="number">3</span>, [<span class="number">9</span>, [<span class="number">4</span>, [], []], []], [<span class="number">7</span>, [], [<span class="number">6</span>, [], []]]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>insert_left(l, <span class="number">11</span>)</span><br><span class="line">[<span class="number">9</span>, [<span class="number">11</span>, [<span class="number">4</span>, [], []], []], []]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r</span><br><span class="line">[<span class="number">3</span>, [<span class="number">9</span>, [<span class="number">11</span>, [<span class="number">4</span>, [], []], []], []], [<span class="number">7</span>, [], [<span class="number">6</span>, [], []]]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_right_child(get_right_child(r))</span><br><span class="line">[<span class="number">6</span>, [], []]</span><br></pre></td></tr></table></figure><h4 id="树的实现形式之二：节点与引用"><a href="#树的实现形式之二：节点与引用" class="headerlink" title="树的实现形式之二：节点与引用"></a>树的实现形式之二：节点与引用</h4><p>节点与引用表示法将树定义为一个类, 其中有根节点与左右子树的属性。树的左子树属性和右子树属性会指向树类的其他实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## BinaryTree 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root_obj)</span>:</span></span><br><span class="line">        self.key = root_obj</span><br><span class="line">        self.left_child = <span class="literal">None</span></span><br><span class="line">        self.right_child = <span class="literal">None</span></span><br><span class="line">    <span class="comment">## 插入左子节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_left</span><span class="params">(self, new_node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.left_child == <span class="literal">None</span>:</span><br><span class="line">            self.left_child = BinaryTree(new_node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            t = BinaryTree(new_node)</span><br><span class="line">            t.left_child = self.left_child</span><br><span class="line">            self.left_child = t</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## 插入右子节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_right</span><span class="params">(self, new_node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.right_child == <span class="literal">None</span>:</span><br><span class="line">            self.right_child = BinaryTree(new_node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            t = BinaryTree(new_node)</span><br><span class="line">            t.right_child = self.right_child</span><br><span class="line">            self.right_child = t</span><br><span class="line">    <span class="comment">## 二叉树的访问函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_right_child</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.right_child</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_left_child</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.left_child</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_root_val</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        self.key = obj</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_root_val</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.key</span><br></pre></td></tr></table></figure><p>正如二叉树的子树都是二叉树，根节点的左右子节点本身都是 BinaryTree 类的实例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = BinaryTree(<span class="string">'a'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.get_root_val()</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.get_left_child())</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.insert_left(<span class="string">'b'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.get_left_child())</span><br><span class="line">&lt;__main__.BinaryTree object at <span class="number">0x0000019EA28B8700</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.get_left_child().get_root_val())</span><br><span class="line">b</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.insert_right(<span class="string">'c'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.get_right_child())</span><br><span class="line">&lt;__main__.BinaryTree object at <span class="number">0x0000019EA2793E80</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.get_right_child().get_root_val())</span><br><span class="line">c</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.get_right_child().set_root_val(<span class="string">'hello'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.get_right_child().get_root_val())</span><br><span class="line">hello</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="二叉树树的应用"><a href="#二叉树树的应用" class="headerlink" title="二叉树树的应用"></a>二叉树树的应用</h3><h4 id="解析树"><a href="#解析树" class="headerlink" title="解析树"></a>解析树</h4><p>可以用上面已经实现的树来解析一些实际问题，比如数学表达式这样的构造。比如，可以将 ((7 + 3) * (5 - 2)) 这样的数学表达式表示成解析树。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pythonds.basic <span class="keyword">import</span> Stack</span><br><span class="line"><span class="keyword">from</span> pythonds.trees <span class="keyword">import</span> BinaryTree</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_parse_tree</span><span class="params">(fpexp)</span>:</span></span><br><span class="line">    fplist = fpexp.split()</span><br><span class="line">    p_stack = Stack()</span><br><span class="line">    e_tree = BinaryTree(<span class="string">''</span>)</span><br><span class="line">    p_stack.push(e_tree)</span><br><span class="line">    current_tree = e_tree</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> fplist:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">'('</span>:</span><br><span class="line">            current_tree.insertLeft(<span class="string">''</span>)</span><br><span class="line">            p_stack.push(current_tree)</span><br><span class="line">            current_tree = current_tree.getLeftChild()</span><br><span class="line">        <span class="keyword">elif</span> i <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">'+-*/)'</span>:</span><br><span class="line">            current_tree.setRootVal(eval(i))</span><br><span class="line">            parent = p_stack.pop()</span><br><span class="line">            current_tree = parent</span><br><span class="line">        <span class="keyword">elif</span> i <span class="keyword">in</span> <span class="string">'+-*/'</span>:</span><br><span class="line">            current_tree.setRootVal(i)</span><br><span class="line">            current_tree.insertRight(<span class="string">''</span>)</span><br><span class="line">            p_stack.push(current_tree)</span><br><span class="line">            current_tree = current_tree.getRightChild()</span><br><span class="line">        <span class="keyword">elif</span> i == <span class="string">')'</span>:</span><br><span class="line">            current_tree = p_stack.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Unknown Operator: "</span> + i)</span><br><span class="line">    <span class="keyword">return</span> e_tree</span><br></pre></td></tr></table></figure><p>定义如下 4 条规则：</p><ol><li>如果当前标记是 ( ，就为当前节点添加一个左子节点，并下沉至该子节点</li><li>如果当前标记在列表 [‘+’, ‘-‘, ‘/‘, ‘*’] 中，就将当前节点的值设为当前标记对应的运算符；为当前节点添加一个右子节点，并下沉至该子节点</li><li>如果当前标记是数字，就将当前节点的值设为这个数并返回至父节点</li><li>如果当前标记是 ) ，就跳到当前节点的父节点</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="comment">## 计算二叉树的递归函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(parse_tree)</span>:</span></span><br><span class="line">    opers = &#123;</span><br><span class="line">         <span class="string">'+'</span>:operator.add, </span><br><span class="line">          <span class="string">'-'</span>:operator.sub, </span><br><span class="line">          <span class="string">'*'</span>:operator.mul, </span><br><span class="line">          <span class="string">'/'</span>:operator.truediv&#125;</span><br><span class="line">    left_c = parseTree.getLeftChild() </span><br><span class="line">    right_c = parseTree.getRightChild() </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> left_c <span class="keyword">and</span> right_c:</span><br><span class="line">        fn = opers[parseTree.getRootVal()] </span><br><span class="line">        <span class="keyword">return</span> fn(evaluate(left_c), evaluate(right_c))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> parseTree.getRootVal()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fpexp = <span class="string">'( ( 7 + 3 ) * ( 5 - 2 ) )'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fpexp_tree =  build_parse_tree(fpexp)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>evaluate(fpexp_tree)</span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure><h4 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h4><p>树的遍历方法有三种： 前序遍历、中序遍历和后序遍历</p><ul><li>前序遍历：在前序遍历中，先访问根节点，然后递归地前序遍历左子树，最后递归地前序遍历右子树。</li><li>中序遍历：在中序遍历中，先递归地中序遍历左子树，然后访问根节点，最后递归地中序遍历右子树。</li><li>后序遍历：在后序遍历中，先递归地后序遍历右子树，然后递归地后序遍历左子树，最后访问根节点。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 将前序遍历算法实现为 BinaryTree 类的方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(self.key)</span><br><span class="line">    <span class="keyword">if</span> self.left_child:</span><br><span class="line">        self.left_child.preorder()</span><br><span class="line">    <span class="keyword">if</span> self.right_child：</span><br><span class="line">        self.right_child.preorder()</span><br></pre></td></tr></table></figure><p>用后序遍历重写计算函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_order_eval</span><span class="params">(tree)</span>:</span></span><br><span class="line">    opers = &#123;</span><br><span class="line">         <span class="string">'+'</span>:operator.add, </span><br><span class="line">          <span class="string">'-'</span>:operator.sub, </span><br><span class="line">          <span class="string">'*'</span>:operator.mul, </span><br><span class="line">          <span class="string">'/'</span>:operator.truediv&#125;</span><br><span class="line">    </span><br><span class="line">    res1 = <span class="literal">None</span></span><br><span class="line">    res2 = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> tree:</span><br><span class="line">        res1 = post_order_eval(tree.getLeftChild())</span><br><span class="line">        res2 = post_order_eval(tree.getRightChild())</span><br><span class="line">        <span class="keyword">if</span> res1 <span class="keyword">and</span> res2:</span><br><span class="line">            <span class="keyword">return</span> opers[tree.getRootVal()](res1, res2)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> tree.getRootVal()</span><br></pre></td></tr></table></figure><p>用中序遍历打印括号表达式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printexp</span><span class="params">(tree)</span>:</span></span><br><span class="line">    s_val = <span class="string">""</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> tree:</span><br><span class="line">        s_val = <span class="string">'('</span> + printexp(tree.getLeftChild())</span><br><span class="line">        s_val = s_val + str(tree.getRootVal())</span><br><span class="line">        s_val = s_val + printexp(tree.getRightChild()) + <span class="string">')'</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> s_val</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pythonds.trees <span class="keyword">import</span> BinaryTree </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = BinaryTree(<span class="string">'*'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.insertLeft(<span class="string">'+'</span>)  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = x.getLeftChild() </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.insertLeft(<span class="number">4</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.insertRight(<span class="number">5</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.insertRight(<span class="number">7</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(printexp(x)) </span><br><span class="line">(((<span class="number">4</span>) + (<span class="number">5</span>)) * (<span class="number">7</span>)) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(postordereval(x)) </span><br><span class="line"><span class="number">63</span> </span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h3><p>二叉堆是实现优先级队列的经典方法。而插队的入队和出队操作都可以达到 O(logn)。二叉堆画出来很像一棵树，但实现时只用一个列表作为内部表示。<br>二叉堆的两个常见的变体为：最小堆（最小的元素一直在队首）与最大堆（最大的元素一直在队首）。</p><h4 id="二叉堆的实现"><a href="#二叉堆的实现" class="headerlink" title="二叉堆的实现"></a>二叉堆的实现</h4><p>如果一个二叉树除了最底层，其他每一层的节点都是满的，这个二叉树就被称为完全二叉树。引出完全二叉树的概念有助于高效地实现二叉堆。</p><p>堆的有序性：对于堆中任意元素 x 及其父元素 p，p 都不大于 x。<br>二叉堆类 BinaryHeap 的 heal_list 的第一个元素是 0 ，它的唯一用途是为了使后续的方法可以使用整数除法。</p><p>BinaryHeap 的 insert 方法先将元素追加到列表的末尾，然后通过比较新元素与父元素的大小。如果新元素小于其父元素就将二者交换，以此来保证堆的结构性质。通过 perc_up 方法，元素将一直沿着树向上移动，指导重获堆的结构性质。</p><p>BinaryHeap 的 del_min 方法的难点是，如何在移除根节点后重构堆的性质和有序性。可以分两步重建堆：第一步，取出列表中最后一个元素，将其移到根节点的位置;第二步，将新的根节点沿着树推到正确的位置。通过辅助函数 perc_down 和 min_child 方法来实现上述 del_min 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryHeap</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.heap_list = [<span class="number">0</span>]</span><br><span class="line">        self.current_size = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perc_up</span><span class="params">(self, i)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> i // <span class="number">2</span> &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> self.heap_list[i] &lt; self.heap_list[i // <span class="number">2</span>]:</span><br><span class="line">                self.heap_list[i // <span class="number">2</span>], self.heap_list[i] = self.heap_list[i], self.heap_list[i // <span class="number">2</span>]</span><br><span class="line">            i = i // <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, k)</span>:</span></span><br><span class="line">        self.heap_list.append(k)</span><br><span class="line">        self.curent_size = self.current_size + <span class="number">1</span></span><br><span class="line">        self.perc_up(self.current_size)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perc_down</span><span class="params">(self, i)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> (i * <span class="number">2</span>) &lt;= self.current_size:</span><br><span class="line">            mc = self.min_child(i)</span><br><span class="line">            <span class="keyword">if</span> self.heap_list[i] &gt; self.heap_list[mc]:</span><br><span class="line">                self.heap_list[i], self.heap_list[mc] = self.heap_list[mc], self.heap_list[i]</span><br><span class="line">            i = mc</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">min_child</span><span class="params">(self, i)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i * <span class="number">2</span> + <span class="number">1</span> &gt; self.current_size:</span><br><span class="line">            <span class="keyword">return</span> i * <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.heap_list[i * <span class="number">2</span>] &lt; self.heap_list[i * <span class="number">2</span> + <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> i * <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> i * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_min</span><span class="params">(self)</span>:</span></span><br><span class="line">        ret_val = self.heap_list[i]</span><br><span class="line">        self.heap_list[<span class="number">1</span>] = self.heap_list[self.current_size]</span><br><span class="line">        self.current_size = self.current_size - <span class="number">1</span></span><br><span class="line">        self.heap_list.pop()</span><br><span class="line">        self.perc_down(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ret_val</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_heap</span><span class="params">(self, alist)</span>:</span></span><br><span class="line">        i = len(alist) // <span class="number">2</span></span><br><span class="line">        self.current_size = len(alist)</span><br><span class="line">        self.heap_list = [<span class="number">0</span>] + alist[:]</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span>):</span><br><span class="line">            self.perc_down(i)</span><br><span class="line">            i = i - <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = BinaryHeap()</span><br><span class="line">&gt;&gt;&gt;a.build_heap([<span class="number">9</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">&gt;&gt;&gt;print(a.heap_list)</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p>二叉搜索树是映射的另一种实现。</p><p>二叉搜索树依赖于这样一个性质：小于父节点的键都在左子树中，大于父节点的键则都在右子树中。</p><p>使用 BinarySearchTree 类和 TreeNode 类来实现二叉搜索树：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = <span class="literal">None</span></span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.root.__iter__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,key,val)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.root:</span><br><span class="line">            self._put(key,val,self.root)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.root = TreeNode(key,val)</span><br><span class="line">        self.size = self.size + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_put</span><span class="params">(self,key,val,currentNode)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key &lt; currentNode.key:</span><br><span class="line">            <span class="keyword">if</span> currentNode.hasLeftChild():</span><br><span class="line">                self._put(key,val,currentNode.leftChild)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                currentNode.leftChild = TreeNode(key,val,parent=currentNode)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> currentNode.hasRightChild():</span><br><span class="line">                self._put(key,val,currentNode.rightChild)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                currentNode.rightChild = TreeNode(key,val,parent=currentNode)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self,k,v)</span>:</span></span><br><span class="line">        self.put(k,v)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.root:</span><br><span class="line">            res = self._get(key,self.root)</span><br><span class="line">            <span class="keyword">if</span> res:</span><br><span class="line">                <span class="keyword">return</span> res.payload</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get</span><span class="params">(self,key,currentNode)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> currentNode:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">elif</span> currentNode.key == key:</span><br><span class="line">            <span class="keyword">return</span> currentNode</span><br><span class="line">        <span class="keyword">elif</span> key &lt; currentNode.key:</span><br><span class="line">            <span class="keyword">return</span> self._get(key,currentNode.leftChild)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self._get(key,currentNode.rightChild)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self,key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.get(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self,key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._get(key,self.root):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,key)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.size &gt; <span class="number">1</span>:</span><br><span class="line">        nodeToRemove = self._get(key,self.root)</span><br><span class="line">        <span class="keyword">if</span> nodeToRemove:</span><br><span class="line">            self.remove(nodeToRemove)</span><br><span class="line">            self.size = self.size<span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">'Error, key not in tree'</span>)</span><br><span class="line">    <span class="keyword">elif</span> self.size == <span class="number">1</span> <span class="keyword">and</span> self.root.key == key:</span><br><span class="line">        self.root = <span class="literal">None</span></span><br><span class="line">        self.size = self.size - <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">'Error, key not in tree'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self,key)</span>:</span></span><br><span class="line">        self.delete(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findSuccessor</span><span class="params">(self)</span>:</span></span><br><span class="line">        succ = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> self.hasRightChild():</span><br><span class="line">            succ = self.rightChild.findMin()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.parent:</span><br><span class="line">                <span class="keyword">if</span> self.isLeftChild():</span><br><span class="line">                    succ = self.parent</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.parent.rightChild = <span class="literal">None</span></span><br><span class="line">                    succ = self.parent.findSuccessor()</span><br><span class="line">                    self.parent.rightChild = self</span><br><span class="line">        <span class="keyword">return</span> succ</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMin</span><span class="params">(self)</span>:</span></span><br><span class="line">        current = self</span><br><span class="line">        <span class="keyword">while</span> current.hasLeftChild():</span><br><span class="line">            current = current.leftChild</span><br><span class="line">        <span class="keyword">return</span> current</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spliceOut</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.isLeaf():</span><br><span class="line">            <span class="keyword">if</span> self.isLeftChild():</span><br><span class="line">                self.parent.leftChild = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.parent.rightChild = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">elif</span> self.hasAnyChildren():</span><br><span class="line">            <span class="keyword">if</span> self.hasLeftChild():</span><br><span class="line">                <span class="keyword">if</span> self.isLeftChild():</span><br><span class="line">                    self.parent.leftChild = self.leftChild</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.parent.rightChild = self.leftChild</span><br><span class="line">                self.leftChild.parent = self.parent</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> self.isLeftChild():</span><br><span class="line">                    self.parent.leftChild = self.rightChild</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.parent.rightChild = self.rightChild</span><br><span class="line">                self.rightChild.parent = self.parent</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, currentNode)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> currentNode.isLeaf():</span><br><span class="line">            <span class="keyword">if</span> currentNode == currentNode.parent.leftChild:</span><br><span class="line">                currentNode.parent.leftChild = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                currentNode.parent.rightChild = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># this node has one child</span></span><br><span class="line">            <span class="keyword">if</span> currentNode.hasLeftChild():</span><br><span class="line">                <span class="keyword">if</span> currentNode.isLeftChild():</span><br><span class="line">                currentNode.leftChild.parent = currentNode.parent</span><br><span class="line">                currentNode.parent.leftChild = currentNode.leftChild</span><br><span class="line">                <span class="keyword">elif</span> currentNode.isRightChild():</span><br><span class="line">                currentNode.leftChild.parent = currentNode.parent</span><br><span class="line">                currentNode.parent.rightChild = currentNode.leftChild</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                currentNode.replaceNodeData(currentNode.leftChild.key,</span><br><span class="line">                                    currentNode.leftChild.payload,</span><br><span class="line">                                    currentNode.leftChild.leftChild,</span><br><span class="line">                                    currentNode.leftChild.rightChild)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> currentNode.isLeftChild():</span><br><span class="line">                currentNode.rightChild.parent = currentNode.parent</span><br><span class="line">                currentNode.parent.leftChild = currentNode.rightChild</span><br><span class="line">                <span class="keyword">elif</span> currentNode.isRightChild():</span><br><span class="line">                currentNode.rightChild.parent = currentNode.parent</span><br><span class="line">                currentNode.parent.rightChild = currentNode.rightChild</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                currentNode.replaceNodeData(currentNode.rightChild.key,</span><br><span class="line">                                    currentNode.rightChild.payload,</span><br><span class="line">                                    currentNode.rightChild.leftChild,</span><br><span class="line">                                    currentNode.rightChild.rightChild)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> currentNode.hasBothChildren(): <span class="comment">#interior</span></span><br><span class="line">                succ = currentNode.findSuccessor()</span><br><span class="line">                succ.spliceOut()</span><br><span class="line">                currentNode.key = succ.key</span><br><span class="line">                currentNode.payload = succ.payload</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self:</span><br><span class="line">        <span class="keyword">if</span> self.hasLeftChild():</span><br><span class="line">                <span class="keyword">for</span> elem <span class="keyword">in</span> self.leftChiLd:</span><br><span class="line">                    <span class="keyword">yield</span> elem</span><br><span class="line">        <span class="keyword">yield</span> self.key</span><br><span class="line">        <span class="keyword">if</span> self.hasRightChild():</span><br><span class="line">                <span class="keyword">for</span> elem <span class="keyword">in</span> self.rightChild:</span><br><span class="line">                    <span class="keyword">yield</span> elem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,key,val,left=None,right=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       parent=None)</span>:</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.payload = val</span><br><span class="line">        self.leftChild = left</span><br><span class="line">        self.rightChild = right</span><br><span class="line">        self.parent = parent</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasLeftChild</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.leftChild</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasRightChild</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.rightChild</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isLeftChild</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.parent <span class="keyword">and</span> self.parent.leftChild == self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isRightChild</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.parent <span class="keyword">and</span> self.parent.rightChild == self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isRoot</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.parent</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isLeaf</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> (self.rightChild <span class="keyword">or</span> self.leftChild)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasAnyChildren</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.rightChild <span class="keyword">or</span> self.leftChild</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasBothChildren</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.rightChild <span class="keyword">and</span> self.leftChild</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceNodeData</span><span class="params">(self,key,value,lc,rc)</span>:</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.payload = value</span><br><span class="line">        self.leftChild = lc</span><br><span class="line">        self.rightChild = rc</span><br><span class="line">        <span class="keyword">if</span> self.hasLeftChild():</span><br><span class="line">            self.leftChild.parent = self</span><br><span class="line">        <span class="keyword">if</span> self.hasRightChild():</span><br><span class="line">            self.rightChild.parent = self</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;树的术语和定义&quot;&gt;&lt;a href=&quot;#树的术语和定义&quot; class=&quot;headerlink&quot; title=&quot;树的术语和定义&quot;&gt;&lt;/a&gt;树的术语和定义&lt;/h3&gt;&lt;h4 id=&quot;节点&quot;&gt;&lt;a href=&quot;#节点&quot; class=&quot;headerlink&quot; title=&quot;节点&quot;&gt;&lt;/a&gt;节点&lt;/h4&gt;&lt;p&gt;节点是树的基础部分。节点可以有自己的名字，被称作“键”，节点也可以有附带信息，被称为“有效载荷”。&lt;/p&gt;
&lt;h4 id=&quot;边&quot;&gt;&lt;a href=&quot;#边&quot; class=&quot;headerlink&quot; title=&quot;边&quot;&gt;&lt;/a&gt;边&lt;/h4&gt;&lt;p&gt;两个节点通过一条边相连，表示他们之间存在关系。除了根节点之外，其他每个节点仅有一条入边，出边则可能有多条。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://absinthes2049.github.io/categories/Python/"/>
    
    <category term="Data Science" scheme="https://absinthes2049.github.io/categories/Data-Science/"/>
    
    
    <category term="Algorithm" scheme="https://absinthes2049.github.io/tags/Algorithm/"/>
    
  </entry>
  
</feed>
